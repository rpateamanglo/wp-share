<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config" scriptlang="groovy">

		
<robotics-flow>
<robot driver="universal" name="driver" start-in-private="false" close-on-completion="true">
			<capability name ="SEARCH_ALL_WINDOWS" value="true"/>
			<capability name="CLOSE_ALL_WINDOWS" value="false"/>
		<script><![CDATA[
		
			//date
			import java.time.LocalDate;
			import java.time.LocalDateTime;
			import java.time.ZoneId;
			import java.time.format.DateTimeFormatter
			import java.util.*;
			import java.text.SimpleDateFormat;
			//apache excel
			import org.apache.poi.xssf.usermodel.*;
			import org.apache.poi.ss.usermodel.*;
			import org.apache.poi.hssf.usermodel.*;
			import java.text.SimpleDateFormat;
			import org.apache.poi.ss.usermodel.DateUtil
			
			//Global Variable[export]
			String pwdStr 		 = "2020-10-12";
			String karanLocalStr = "2020-10-13";
			LocalDate pwd    = LocalDate.parse(pwdStr); 
			LocalDate karanLocal    = LocalDate.parse(karanLocalStr); 										//live
			LocalDateTime kLDT 		= LocalDateTime.now(ZoneId.of("GMT+04:00"));
			
			//mail settings
			String mail_to = ""
			
			//path
			String noError_excel_path = "C:\\Users\\rb-mu_robot_vpc_01\\Desktop\\no_error.xlsx"
			String pwd_noError_excel_path = "C:\\Users\\rb-mu_robot_vpc_01\\Desktop\\no_error - dated.xlsx"
			
			boolean no_go = false;
		
			File noErrorExcel = new File(noError_excel_path); 
			FileInputStream fisi = new FileInputStream(noErrorExcel);
			XSSFWorkbook inputWorkbook = new XSSFWorkbook(fisi);
			XSSFSheet inputSheet = inputWorkbook.getSheetAt(0);
			
			//get last row
			int rowCount = inputSheet.getLastRowNum();
			Date receivedDate;
			Date processedDate;
			int processedCount;
			int processedCountStr;
			LocalDate processedLocalDate;
			LocalDate receivedLocalDate;
			Row currentRow;
			
			//weekend scenario(run on tuesday) [READ MONDAY EXCEL]-->sometimes tuesday excel will be empty
			if(karanLocal.getDayOfWeek().toString() == "TUESDAY"){
				
				
				//excluding monday is a public holiday
				if(pwd.getDayOfWeek().toString() == "MONDAY"){
					
					log.info("pas de lundi cordonnier")
					
					//get records from monday's processed file
					File pwdProcessedExcel = new File(pwd_noError_excel_path);
					FileInputStream fisi2 = new FileInputStream(pwdProcessedExcel);
					XSSFWorkbook inputWorkbook2 = new XSSFWorkbook(fisi2);
					XSSFSheet inputSheet2 = inputWorkbook2.getSheetAt(0);
					//get last row
					int rowCount2 = inputSheet2.getLastRowNum();
					Date receivedDate2;
					Date processedDate2;
					int processedCount2;
					int processedCountStr2;
					LocalDate processedLocalDate2;
					LocalDate receivedLocalDate2;
					Row currentRow2;
					
					for(int currentRowCount2 = 1; currentRowCount2 <= rowCount2; currentRowCount2++){
						currentRow2 = inputSheet2.getRow(currentRowCount2);
						
						//println("Row "+currentRowCount2)
						
						if(currentRow2.getCell(0) == null){
							println("brokeman")
							break;
						}
							
						//received date of mail
						receivedDate2  = currentRow2.getCell(0).getDateCellValue();
						receivedLocalDate2 = receivedDate2.toLocalDate();
						
						
						//take only monday and sunday mail
						if(receivedLocalDate2.getDayOfWeek().toString() == "MONDAY" || receivedLocalDate2.getDayOfWeek().toString() == "SUNDAY"){
							
							log.info("Entries have to be done manually for Saturday, Sunday and Monday");
							log.info("Error File received on- " + receivedLocalDate2)
							
							no_go = true;
							
						}
						
					}
					fisi2.close();			
				}
				
			}
			
			for(int currentRowCount = 1; currentRowCount <= rowCount; currentRowCount++){
				currentRow = inputSheet.getRow(currentRowCount);
				
				if(currentRow.getCell(0) == null){
					//println("brokeman")
					break;
				}
				//received date of mail
				receivedDate  = currentRow.getCell(0).getDateCellValue();
				//println(receivedDate)
				receivedLocalDate = receivedDate.toLocalDate();
				
				//WEEKEND AND WEEKDAYS SCENARIOS
				//weekend scenario(run on monday)
				if(karanLocal.getDayOfWeek().toString() == "MONDAY"){
				
					log.info("Moon-day")
					//thursday and friday is public holiday
					if(pwd.getDayOfWeek().toString() == "WEDNESDAY"){
					
						log.info("notta fry-day nor thirst-day");
						
						//take thursday, friday and saturday mails
						if(receivedLocalDate == pwd.plusDays(1) || receivedLocalDate == pwd.plusDays(2) || receivedLocalDate == pwd.plusDays(3)){
							
							log.info("Entries have to be done manually for Wednesday, Thursday and Friday");
							log.info("Error File received on- " + receivedLocalDate)
							
							no_go = true;
							
						}
						
					}
					
					
					//friday is a public holiday
					if(pwd.getDayOfWeek().toString() == "THURSDAY"){
					
						
						//take friday and saturday mail
						if(receivedLocalDate == pwd.plusDays(1) || receivedLocalDate == pwd.plusDays(2)){
						
							log.info("Entries have to be done manually for Thursday and Friday");
							log.info("Error File received on- " + receivedLocalDate);
							
							no_go = true;
							
						}
						
					}
					
					
					//normal(take only saturday mail)
					if(pwd.getDayOfWeek().toString() == "FRIDAY" && receivedLocalDate == pwd.plusDays(1)){
					
						log.info("Entries have to be done manually for Friday");
						log.info("Error File received on- " + receivedLocalDate);
						
						no_go = true;
						
					}
					
				}
				
				//weekend scenario(run on tuesday) [READ TUESDAY EXCEL]
				if(karanLocal.getDayOfWeek().toString() == "TUESDAY"){
					
					//excluding monday is a public holiday
					if(pwd.getDayOfWeek().toString() == "MONDAY"){
						if(receivedLocalDate == pwd.plusDays(1)){
							log.info("Entries have to be done manually for Saturday, Sunday and Monday");
							log.info("Error File received on- " + receivedLocalDate);
							
							no_go = true;
						}
					}
					
				}
					


				//normal scenario-->check if date falls between one day after pwd and current day(normally it will be the same day except for some public holiday scenarios)
				if(receivedLocalDate <= karanLocal && receivedLocalDate >= pwd.plusDays(1) && karanLocal.getDayOfWeek().toString() != "MONDAY" && karanLocal.getDayOfWeek().toString() != "TUESDAY"){  
					//println("checkin in")
					
					log.info("Entries have to be done manually");
					log.info("Error File received on- " + receivedLocalDate);
					
					no_go = true;
				
				}
					
			}
			fisi.close();
			
			
			sys.defineVariable("no_go",no_go);
			
		
		]]></script>
	
	</robot>
</robotics-flow>

<try>	
	<body>
		<case>
			<if condition="${no_go}">
				<mail 
					smtp-host="${mail_host}"
					smtp-port="25"
					type="html"
					from = "${mail_from}"
					to = 	"${mail_to}"
					subject="[Error] Manuel Teller" 
				>
					
					<var name="subject"/>Request received from <var name= "received_from"/>
					
					<![CDATA[<hr><em>]]>
						Generated by DiploBotus
					<![CDATA[</em>]]>
					
				</mail>
			</if>
		 </case>
	</body>
	<catch>
		<script>
            log.info("Error Sending Mail");	
       </script>
	</catch>
 </try>
		
<export include-original-data="true">
	<single-column name="no_go" value="${no_go}"/>
</export>

</config>

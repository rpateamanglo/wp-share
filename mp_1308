<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config" scriptlang="groovy">

<secrets-vault-get alias="makola_capture_officer" />
<secrets-vault-get alias="makola_supervisor_officer" />

<var-def name="links">
	<datastore name="maks">
		SELECT * FROM @this
	</datastore>
</var-def>
		
<robotics-flow>
<robot driver="universal" start-in-private="false" close-on-completion="true">
			<capability name ="SEARCH_ALL_WINDOWS" value="true"/>
			<capability name="CLOSE_ALL_WINDOWS" value="false"/>
		<script><![CDATA[
			
			//WHERE TO TAKE PAYMENT FILES--IF FROM A SPECIFIC FOLDER COPY TO DAILY FOLDER
			
			////////////////////////////////PREREQUISITE FILES/////////////////////////
			//payment_file.xlsx
			//Makola_excel_template.xlsx
			////////////////////////////////PREREQUISITE FILES/////////////////////////
			//date
			import java.time.LocalDate;
			import java.time.LocalDateTime;
			import java.time.ZoneId;
			import java.time.format.DateTimeFormatter;
			//file manipulations
			import java.nio.file.Files
			import org.apache.commons.io.FileUtils;
			import java.io.File;
			import java.io.FileInputStream;
			import java.io.FileOutputStream;
			import java.util.*;
			import java.nio.file.FileSystem;
			import java.nio.file.FileSystems;
			import java.nio.file.Files;
			import java.nio.file.Path;
			import java.nio.file.StandardCopyOption;
			//apache excel
			import org.apache.poi.xssf.usermodel.*;
			import org.apache.poi.ss.usermodel.*;
			import org.apache.poi.hssf.usermodel.*;
			import java.text.SimpleDateFormat;
			import org.apache.poi.ss.usermodel.DateUtil
			//switch to existing window
			import com.workfusion.studio.rpa.recorder.api.*
			import com.workfusion.studio.rpa.recorder.api.types.*
			import com.workfusion.studio.rpa.recorder.api.custom.*
			import com.workfusion.studio.rpa.recorder.api.internal.representation.*
			import com.workfusion.bot.exception.*
			
			//SECRETS VAULT
			Map entryMap = secureEntryMap.getWrappedObject();
            com.freedomoss.crowdcontrol.webharvest.web.dto.SecureEntryDTO obj = entryMap.get("makola_capture_officer");
            com.freedomoss.crowdcontrol.webharvest.web.dto.SecureEntryDTO obj2 = entryMap.get("makola_supervisor_officer");
            username1 = obj.getKey().toString();
            password1 = obj.getValue().toString();
            username2 = obj2.getKey().toString();
            password2 = obj2.getValue().toString();
			
			//DIRECTORY
			String Dir = links.get(0).getAt("value").toString();

			//MAKOLA PORTAL
			String makola_portal = links.get(1).getAt("value").toString();
			//MAKOLA CREDS
			String makola_username= username1;
			String makola_username2 = username2;
			String makola_password = password1;
			String makola_password2 = password2;
			
			LocalDate karanLocal = LocalDate.now();
			LocalDateTime kldt = LocalDateTime.now(ZoneId.of("GMT+04:00"));
			String tayme = karanLocal.toString() + " " + kldt.getHour().toString() + ":" + kldt.getMinute().toString();	
			
			/////////////////////////////////CREATE FOLDER////////////////////////////
			DateTimeFormatter yearlyFolderDateFormat = DateTimeFormatter.ofPattern("yyyy");
			DateTimeFormatter monthlyFolderDateFormat = DateTimeFormatter.ofPattern("MM MMMM");
			DateTimeFormatter dailyFolderDateFormat = DateTimeFormatter.ofPattern("dd.MM.yy");
			String currYr_folder = karanLocal.format(yearlyFolderDateFormat);
			String currMtn_folder = karanLocal.format(monthlyFolderDateFormat);
			String currdt_folder = karanLocal.format(dailyFolderDateFormat);
			
			path1 = Dir;
			//DAILY FOLDER
			File yearlyFolder = new File(path1+currYr_folder);
			if(!yearlyFolder.exists()){
				yearlyFolder.mkdir();
			}
			
			File monthlyFolder = new File(Dir+currYr_folder+"\\"+currMtn_folder);
			if(!monthlyFolder.exists()){
				monthlyFolder.mkdir();
			}

			File dailyFolder = new File(Dir+currYr_folder+"\\"+currMtn_folder+"\\"+currdt_folder);
			if(!dailyFolder.exists()){
				dailyFolder.mkdir();
			}
			/////////////////////////////////CREATE FOLDER////////////////////////////
			
			//paths
			def direstraits = Dir+currYr_folder+"\\"+currMtn_folder+"\\"+currdt_folder+"\\" //daily folder loc
			
			int n = 0;
			String control_sum = "";
			boolean review_error = false;
			int deb_count;
			boolean approved = false;
			boolean payment_file_error = false;
			
			//LOG FILE
			FileWriter fr = new FileWriter(direstraits+"log.txt",true);
			BufferedWriter loginta = new BufferedWriter(fr);
			
			loginta.append("-------------------------------------------");
			loginta.newLine();
			loginta.append(tayme);
			loginta.newLine();
			loginta.newLine();
			
			//BROWSE FOR PAYMENT FILES
			List<String> results = new ArrayList<String>();
      		File[] files = new File(direstraits).listFiles();      
			String num_of_files = new File(Dir).listFiles().length;
			int count = 0;

        	for (File file : files){
				if(file.isFile()){
					if(file.getName().contains("payment") || file.getName().contains("Payment")){
						results.add(file.getName());
						count++;
					}
				}
			}

           log.info("Payment Files : "+results);
		   log.info("Numbeurre of payment files: "+count);
 		   
 		   //write to error log if no payment file(s) found
 		   if(count == 0){
			   loginta.append("No Payment File found");
			   loginta.newLine();
		   }
			
			List bank = new ArrayList();
			List branch = new ArrayList();
			List acc_num = new ArrayList();
			List acc_holder = new ArrayList();
			List ref = new ArrayList();
			List amt = new ArrayList();
			List indicator = new ArrayList();	
			
			List credit_holders_amt = new ArrayList();		
			List branchList = ["06","07","10","11","12","13","14","15","17","18","19","20","23","25","28","29","32","33","34","35","36","37","39","42","45","46","48","49","52","53","66","67"];																		

 			DateTimeFormatter logExcelDateFormat = DateTimeFormatter.ofPattern("MMMM yyyy");
			String logExcel_file = karanLocal.format(logExcelDateFormat);
 			
 			String dateExcelPath = Dir+currYr_folder+"\\"+currMtn_folder+"\\"+logExcel_file+".xlsx";
 			String dateExcelTemplatePath = Dir+"Makola_excel_template.xlsx";
			String direstraits_monthly = Dir+currYr_folder+"\\"+currMtn_folder+"\\;
 			
 			//PRESENCE CHECK DATE EXCEL
 			File dateExcelFile = new File(dateExcelPath);
			File dateExcelTemplateFile = new(dateExcelTemplatePath);
 			
			if(!dateExcelFile.exists()){
				Files.copy(dateExcelTemplateFile.toPath(), dateExcelFile.toPath());
			}
 			
			
			/////////////////////////////PAYMENT FILES LOOP////////////////////////////
			for(int i = 0; i < results.size(); i++){
			/////////////////////////////PAYMENT FILES LOOP////////////////////////////

			/////////////////////////////////GATHER DATA///////////////////////////////
			payment_file_error = false;
			approved = false;
			int credit_count = 0;
			File inputFile1 = null;
			File outputFile1 = null;
			bank.clear();
			branch.clear();
			acc_num.clear();
			acc_holder.clear();
			ref.clear();
			amt.clear();
			indicator.clear();
			credit_holders_amt.clear();
			String error_log_debit_holder = "";
			try{
				//FROM(PAYMENT EXCEL)
				inputFile1 = new File(direstraits+results[i]);//tbc where payment files are to be stored-.------------>assuming daily folder
				FileInputStream fis1 = new FileInputStream(inputFile1);
				XSSFWorkbook inputWorkbook1 = new XSSFWorkbook(fis1);
				XSSFSheet inputSheet1 = inputWorkbook1.getSheetAt(0); 
								
				int rowCount1 = inputSheet1.getLastRowNum();
				log.info(rowCount1+" rows in inputsheet: "+inputSheet1.getSheetName());
				
			    int currentRowIndex1=1;//READ FROM SECOND ROW
			    		               
				Iterator rowIterator1 = inputSheet1.iterator();
				
			while(rowIterator1.hasNext())
			{
		
			
				Row currentRow1 = inputSheet1.getRow(currentRowIndex1);
				
				if(currentRow1 == null){break;}
				Cell blankCheck1 = currentRow1.getCell(0,Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
				if(blankCheck1 == null){break;}
				
						String value1 = "";
						Cell cellData1 = null;
						DataFormatter formatter1 = null;
						Cell debitCell  = null;
						Cell bankCell   = null;
						Cell branchCell = null;
						for(int currentCellIndex1 = 0; currentCellIndex1 < 9; currentCellIndex1++){
							cellData1 = currentRow1.getCell(currentCellIndex1,Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
							debitCell = currentRow1.getCell(6,Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);//----->INDICATOR CELL (DEBIT OR CREDIT)
							bankCell  = currentRow1.getCell(0,Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);//----->BANK NUMBER CELL
							branchCell  = currentRow1.getCell(1,Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);//----->BANK BRANCH CELL
							
							formatter1 = new DataFormatter();
							debitCheck = formatter1.formatCellValue(debitCell);
							bankCheck  = formatter1.formatCellValue(bankCell);
							branchCheck = formatter1.formatCellValue(branchCell);
							value1 = formatter1.formatCellValue(cellData1);
					
								switch(currentCellIndex1){
									
									case 0:	//BANK
										bank.add(value1);
										break;
									
									case 1://BRANCH
										branch.add(value1);
										
										//absa branch check
										boolean debsBranchCheck = true;
										if(debitCheck.equalsIgnoreCase("d")){
											for(int d= 0; d < branchList.size(); d++){
													if(value1.equals(branchList[d])){
														debsBranchCheck = true;
													}		
											}
										}
										if(!debsBranchCheck){
											payment_file_error = true;
										}
										
										break;
										
									case 2://ACCOUNT NUMBER
										acc_num.add(value1);
										
										//VALIDATION(DEBIT)
										//absa check
										if(debitCheck.equalsIgnoreCase("d")){
											if(!bankCheck.equals("03") || value1.length() != 7){
												
												payment_file_error = true;
											}
											
										}
										
										//VALIDATION(CREDIT)
										if(debitCheck.equalsIgnoreCase("c")){
											//bom check
											if(bankCheck.equals("01") && value1.length() != 11){
												payment_file_error = true;
											}
											//bank of baroda check
											if(bankCheck.equals("02") && value1.length() != 10){
												payment_file_error = true;
											}
											//bank one check
											if(bankCheck.equals("05") && value1.length() != 11){
												payment_file_error = true;
											}
											//habib bannk check
											if(bankCheck.equals("06") && value1.length() != 10){
												payment_file_error = true;
											}
											//hbsc check
											if(bankCheck.equals("07") && value1.length() != 9){
												payment_file_error = true;
											}
											//mcb check
											if(bankCheck.equals("09") && value1.length() != 7){
												payment_file_error = true;
											}
											//sbm check
											if(bankCheck.equals("11") && value1.length() != 11){
												payment_file_error = true;
											}
											//bank des mascareignes check
											if(bankCheck.equals("14") && value1.length() != 13){
												payment_file_error = true;
											}
											//standard bank check
											if(bankCheck.equals("22") && value1.length() != 11){
												payment_file_error = true;
											}
											//standard chartered bank check
											if(bankCheck.equals("23") && value1.length() != 12){
												payment_file_error = true;
											}
											//afrasia bank
											if(bankCheck.equals("25") && value1.length() != 12){
												payment_file_error = true;
											}
											//abc banking check
											if(bankCheck.equals("27") && value1.length() != 12){
												payment_file_error = true;
											}
										}
										
										
										break;
										
									case 3://ACCOUNT HOLDER
										acc_holder.add(value1);
										
										if(debitCheck.equalsIgnoreCase("d")){
											error_log_debit_holder = value1;
										}
										
										break;
										
									case 4://REFERENCE
										ref.add(value1);
										break;
										
									case 5://AMOUNT
										amt.add(value1);

										if(debitCheck.equalsIgnoreCase("c")){
									
											credit_holders_amt.add(value1);
										}
										
										break;
										
					
									case 6://CREDIT OR DEBIT
										indicator.add(value1);
										if(value1.equalsIgnoreCase("c")){
											credit_count++;
										}
										break;
									
									
								}
								
	
						}
						currentRowIndex1++;
						
			}
		
			
			inputWorkbook1.close();
			fis1.close();
			
			
			if(payment_file_error){
				log.info("Bank Branch or Account Number Format wrong");
				loginta.append("Payment File- ");
				loginta.append(results[i]);
				loginta.newLine();
				loginta.append("Bank Number or Account Number Format wrong");			
				loginta.newLine();
			
			}
			
			
			
			}catch(Exception e){
				log.info("Error reading input file");
				e.printStackTrace();
				loginta.newLine();
				loginta.append("Error while reading Payment File- ");
				loginta.append(results[i]);
				loginta.newLine();
				payment_file_error = true;
			} 
			/////////////////////////////////GATHER DATA////////////////////////////
	
	
			
			//////////////////////////////PAYMENT FILE ERROR////////////////////////
			if(!payment_file_error){
			///////////////////////////////PAYMENT CAPTURE/////////////////////////
			loginta.append("Payment File- ");
			loginta.append(results[i]);
			loginta.newLine();
			loginta.newLine();
			boolean login_capture_pass = true;
			boolean login_verfiy_pass  = true;
			
			for (int c = 0; c < 2; c++){
				//LOGIN
				openChrome(makola_portal);
				try{
					//logout
					$(byXpath("/html/body/app-root/div/div/sol-header/div/sol-header-masthead/div[3]/div/div/ul/li/span")).click();
					$(byText("Sign Out")).click();
					sleep(3000);
				}catch(Exception e){}
				$(byXpath("//*[@id='username']")).sendKeys(makola_username);
				$(byXpath("//*[@id='password']")).sendKeys(makola_password);
				$(byXpath("//*[@id='kc-login']")).click();
				
				sleep(10000);
				
				try{
					login_capture_pass = $(byXpath("//*[@id='payment-capture']")).is(EXIST);
				}catch(Exception e){
					login_capture_pass = false;
				}
				if(login_capture_pass){break;}
				
			}
			
			if(!login_capture_pass){
				log.info("Payment Officer Login failed twice. Stopping transaction");
				loginta.append(karanDatos.toString());
				loginta.newLine();
				loginta.append("Payment Officer Login failed twice. Stopping transaction");
				loginta.newLine();
			}
			
			
			
			/////////////////////////////////LOGIN SUCCESS//////////////////////////////
			if(login_capture_pass){
			///////////////////////////////////////////////////////////////////////////
			
			//PAYMENT CAPTURE
			try{
				$(byXpath("//*[@id='payment-capture']")).click();
			}catch(Exception e){
				log.info("10s Wait")
				sleep(10000);
				$(byXpath("//*[@id='payment-capture']")).click();
			}
			
			n = 0;
			review_error = false;
			/////////////////////////////////EXCEL DATA LOOP//////////////////////////////
			for(int j = 0; j < indicator.size(); j++){
			//if D indicator is not in first position then it will give error in credit in xpath
			////////////////////////////////////////////////////////////////////////////////
			
			//DEBIT ENTRY
			if(indicator[j].equalsIgnoreCase("D")){
				
				
				deb_count = j;
				control_sum = amt[j];
			
				//$(byXpath("//*[@id='03']")).sendKeys(bank[j]);							//bank
				$(byXpath("//*[@id='undefined']")).sendKeys(branch[j]);						//branch
				$(byXpath("//*[@id='accountNumber']")).sendKeys(acc_num[j]);				//account number
				sleep(3000);
				
				//purpose of payment--to test further
				if($(byXpath("//*[@id='paymentPurpose_customselect']")).is(PRESENT)){
					
					$(byXpath("/html/body/app-root/div/div/div/payment-capture/div/div/form[1]/div/div[2]/div[2]/div[1]/div/div/sol-custom-select/div/div")).click();
					$(byText("Salary")).click();
				}
				
				//posting option = Consolidated
				$(byXpath("/html/body/app-root/div/div/div/payment-capture/div/div/form[1]/div/div[2]/div[2]/div[2]/div/div[1]/div/div/div/sol-radio[2]/label/span[2]")).click();
				//Force Post
				$(byXpath("/html/body/app-root/div/div/div/payment-capture/div/div/form[1]/div/div[2]/div[2]/div[2]/div/div[2]/div/div[2]/sol-checkbox/label")).click();
				//Origination reference
				$(byXpath("//*[@id='instructionOriginationReference']")).sendKeys(ref[j]);
				//Destination reference
				$(byXpath("//*[@id='destinationReference']")).sendKeys(acc_holder[j]);
				//workflow reference
				$(byXpath("//*[@id='workflowReference']")).sendKeys(acc_holder[j]);
				/* 
				//Control sum
				try {
					$(byXpath("//*[@id='controlSum']")).sendKeys(amt[j]);
				} catch (Exception e) {
					e.printStackTrace()
				}
				 */
				log.info("Debit Entry Done");
				loginta.append("Debit entry has been successfully been entered into the system.");			
				loginta.newLine();

			}
		
			//CREDIT ENTRY
			else if(indicator[j].equalsIgnoreCase("C")){
					
					
					$(byXpath("//*[@id='bankCode"+n+"']")).text(bank[j]); 					//bank code
					$(byXpath("//*[@id='branchId"+n+"']")).sendKeys(branch[j]);				//branch
					$(byXpath("//*[@id='accountNumber"+n+"']")).sendKeys(acc_num[j]);		//account number
					
					//account holder 
					//for Barclays account holders, it will be populated automatically so no need to fill in
					try{
						$(byXpath("//*[@id='accountHolder"+n+"']")).click();	//click inputbox first to unlock
						sleep(2000);
						$(byXpath("//*[@id='accountHolder"+n+"']")).sendKeys(acc_holder[j]);
					}catch(Exception e){
						
					}
					
					//origination ref 
					try{
					$(byXpath("//*[@id='originationReference"+n+"']")).sendKeys(ref[j]);
					log.info("Filling Origination Reference");
					}catch(Exception e){}
					
					//destination ref 
					def dest_ref = $(byXpath("//*[@id='destinationReference"+n+"']"));
					if(dest_ref.val() == ""){
						dest_ref.sendKeys(acc_holder[j]);
					}
					
					//amount
					try{
					$(byXpath("//*[@id='amount"+n+"']")).sendKeys(amt[j]);
					}catch(Exception e){log.info("Amount Error "+e)}
					
					n++;
					
					sendKeys(Keys.PAGE_DOWN);
					sleep(2000);
					try{
						if(n < credit_count){	//skip add row in the last row
							$(byText("Add Row")).shouldBe(VISIBLE);
							$(byText("Add Row")).click();	
						}			
					}
					catch(Exception e){log.info("Add Row Button not found")}
					
					
					//Debit thang--fill control sum
					def control_sum_amt = $(byXpath("//*[@id='controlSum']"));
					if(control_sum_amt.val() == "0.00"){
						control_sum_amt.sendKeys(control_sum);
					}
				
			
			}
		
		
			//////////////////////////////END-EXCEL DATA LOOP////////////////////////////
			}
			log.info("Credit Entries Successfully Added");
			loginta.append("Credit Entries have been successfully been added into the system.");			
			loginta.newLine();
			/////////////////////////////////////////////////////////////////////////////
			
			
			/////////////////////////////////VERIFY MATCH///////////////////////////////
			def gross_cred_amount = $(byXpath("/html/body/app-root/div/div/div/payment-capture/div/div/form[2]/div/div[3]/h4[3]/span")).getText();
			String[] list_cred_amount = gross_cred_amount.split(" ");
			String cred_amount = list_cred_amount[1];

			//review
			def review = $(byXpath("/html/body/app-root/div/div/div/payment-capture/sol-footer/div/div/span[3]/footer-primary/button")).is(ENABLED);
			Double control_sum_final = Double.parseDouble(control_sum);
			Double cred_amount_final = Double.parseDouble(cred_amount.replace(",",""));

			if(control_sum_final == cred_amount_final){
				if(review){
					//review button
					$(byXpath("/html/body/app-root/div/div/div/payment-capture/sol-footer/div/div/span[3]/footer-primary/button")).click();	
					//submit button
					sleep(3000);
					$(byXpath("/html/body/app-root/div/div/div/payment-review/sol-footer/div/div/span[3]/footer-primary/button")).waitUntil(VISIBLE);
					
					try{
					//$(byXpath("/html/body/app-root/div/div/div/payment-review/sol-footer/div/div/span[3]/footer-primary/button")).click();
					$(byText("Submit for authorisation")).click();
					log.info("Submitted for Authorisation");
					}catch(Exception e){}
					loginta.append("Transaction Successfully Reviewed and Submitted. Waiting for Confirmation of Supervisor")
					loginta.newLine();
					//success_count++;	//to count how many payment files were successfull
					//debit_holders.add(acc_holder[deb_count]);	//append debit account holder to list
				}
				else{
					//err.append("Debit Account Holder- ");
					//err.append(acc_holder[deb_count]);
					//err.newLine();
					loginta.append("Cannot Review Transaction. Something Wrong")
					loginta.newLine();	
					review_error = true;
					log.info("Cannot Review Transaction. Something Wrong");
					
				}
			}
			else{

				loginta.append("Total Credit Sum and Control Sum does not match");
				loginta.newLine();	
				review_error = true;
				log.info("Total Credit Sum and Control Sum does not match");
			}		
			/////////////////////////////////VERIFY MATCH///////////////////////////////
				
			///////////////////////////////END-PAYMENT CAPTURE//////////////////////////
			
			sleep(7000);
			

			int x = 1;
			
			///////////////////////////////APPROVE PAYMENT////////////////////////////////
			if(!review_error){	//check if payment file submitted
			//////////////////////////////////////////////////////////////////////////////
					
				for (int d = 0; d < 2; d++){
					//LOGIN
					openChrome(makola_portal);
					try{
						//logout
						$(byXpath("/html/body/app-root/div/div/sol-header/div/sol-header-masthead/div[3]/div/div/ul/li/span")).click();
						$(byText("Sign Out")).click();
						sleep(3000);
					}catch(Exception e){}
					$(byXpath("//*[@id='username']")).sendKeys(makola_username2);
					$(byXpath("//*[@id='password']")).sendKeys(makola_password2);
					$(byXpath("//*[@id='kc-login']")).click();
					
					sleep(10000);
					
					try{
						login_verify_pass = $(byText("Task List")).is(EXIST);
					}catch(Exception e){
						login_verify_pass = false;
					}
					if(login_verify_pass){break;}
					
				}
				
				if(!login_verify_pass){
					log.info("Payment Supervisor Login failed twice. Stopping transaction");
					loginta.append("Payment Supervisor Login failed twice. Stopping transaction");
					loginta.newLine();
				}
				
				
				//////////////////////////LOGIN VERIFY ERROR////////////////////////////////
				if(login_verify_pass){
				////////////////////////////////////////////////////////////////////////////
				
				//TASK LIST
				try{
					$(byText("Task List")).click();
				}catch(Exception e){
					log.info("10s Wait")
					sleep(10000);
					$(byText("Task List")).click();
				}
				
				sleep(5000);
				
				int trans_count = 0;
					int y = 1;
					boolean trans_end = false;
					def trans;
					//count how many transactions present 
					while(!trans_end){	
						try{
							//test for no trans
							trans = $(byXpath("//*[@id='taskListDatatable']/div/datatable-body/datatable-selection/datatable-scroller/datatable-row-wrapper["+x+"]/datatable-body-row/div[2]/datatable-body-cell[2]/div/div")).getText();
							//println("TRANS--> "+trans)
							trans_count++;
						}catch(Exception e){
							//log.info("Transaction End")
							trans_end = true;
						}
						x++;	
					}
					log.info("No of transactions in Task List "+trans_count);
					
					boolean duplicate = false;
					Double credit_holders_amt_cmp;
					
					while(y <= trans_count){			//loop through all transactions
					
						trans = $(byXpath("//*[@id='taskListDatatable']/div/datatable-body/datatable-selection/datatable-scroller/datatable-row-wrapper["+trans_count+"]/datatable-body-row/div[2]/datatable-body-cell[2]/div/div")).getText();
			
						//open transaction to validate
						if(trans.equals(acc_holder[deb_count])){	//if workflow ref is same as debit holder
							//VERIFY AND VALIDATE PAYMENT
							if(!duplicate){							
							$(byXpath("//*[@id='taskListDatatable']/div/datatable-body/datatable-selection/datatable-scroller/datatable-row-wrapper["+trans_count+"]/datatable-body-row/div[2]/datatable-body-cell[6]/div/div/div")).click();
								
							//VALIDATE PAYMENT
							boolean cred_end = false;
							int a = 0;
							def cred;
							int cred_verif_count = 0;
							//count how many credit entries in verification
							while(!cred_end){
								try{
									cred = $(byXpath("//*[@id='"+a+"-amount']")).getText();
									cred_verif_count++;
								}catch(Exception e){
									cred_end = true;
								}
								a++;
							}
							log.info("Number of credit entries: "+ cred_verif_count);
							
							int match_count = 0;
							if(cred_verif_count == credit_count){
								log.info("No of rows captured matches the no of rows to be verified");
								
								//loop through amount list to see if it matches
								for(int z=0; z < credit_count; z++){
									
									cred = $(byXpath("//*[@id='"+z+"-amount']")).getText();
									Double cred_val = Double.parseDouble(cred);
									
									credit_holders_amt_cmp = Double.parseDouble(credit_holders_amt[z]);
						
									if(cred_val == credit_holders_amt_cmp){

										match_count++;
									}
								}
							}
							
							approved = false;
							
							//approve payment if all transactions matched
							if(match_count == credit_count){
								//approve
								log.info("All Rows Matched. Ready to Approve");
								$(byText("Approve payment")).click();
								//$(byText("Cancel")).click();	//for testing
								
								loginta.append("All Rows Matched. Approved");
								loginta.newLine();
								
								approved = true;
							}
							//else if all rows not matched- decline payment
							else{
								log.info("Rows not matched. Declining payment");
								$(byText("Decline payment")).click();
								sleep(3000);
								$(byText("Other")).click();
								$(byXpath("//*[@id='rejectReasonText']")).sendKeys("Transactions not matching with capture");
								sleep(2000);
								$(byText("Decline")).click();
								sleep(5000);
								
								loginta.append("Payment Declined. Transactions not matching with capture");
								loginta.newLine();
							}
							
							
							//$(byText("Cancel")).click();	//for testing
							sleep(3000);
							
							duplicate = true;
							}
							
							//DECLINE PAYMENT(DUPLICATE)
							else if(duplicate){
								log.info("Duplicate Found");
								$(byXpath("//*[@id='taskListDatatable']/div/datatable-body/datatable-selection/datatable-scroller/datatable-row-wrapper["+trans_count+"]/datatable-body-row/div[2]/datatable-body-cell[6]/div/div/div")).click();
								sleep(5000);
								$(byText("Decline payment")).click();
								sleep(3000);
								$(byText("Other")).click();
								$(byXpath("//*[@id='rejectReasonText']")).sendKeys("Duplicate Capture");
								sleep(2000);
								$(byText("Decline")).click();
								sleep(5000);
								
								loginta.append("Duplicate Payment(s) Declined");
								loginta.newLine();
							}
							
							
							
						}
						
					trans_count--;
				}
			
			//////////////////////////////LOGIN VERIFY ERROR///////////////////////////////		
			}			
			//////////////////////////////////////////////////////////////////////////////		
			}
			///////////////////////////////APPROVE PAYMENT//////////////////////////////// 
			
			
			
			//////////////////////////////WRITE TO DATE EXCEL/////////////////////////////
			if(approved){
				
				/////////////////////////////MOVE FILE TO TEMP////////////////////////////////
				//Files.move(inputFile1.toPath(),); //if request file is not found in daily folder, move to daily folder here
				/////////////////////////////MOVE FILE TO TEMP////////////////////////////////
				
				try{
				//TO(DATE EXCEL)
				outputFile1 = new File(direstraits_monthly+dateExcel+".xlsx"); 
				FileInputStream fisi1 = new FileInputStream(outputFile1);
						
				XSSFWorkbook outputWorkbook1 = new XSSFWorkbook(fisi1);
				XSSFSheet outputSheet1 = outputWorkbook1.getSheet("makola");
				
				int outputRowCount1 = outputSheet1.getLastRowNum();//GET LAST OUTPUT EXCEL ROW
			
				
				//date
				outputSheet1.createRow(outputRowCount1+1).createCell(0).setCellValue(karanLocal);
				//company-->account holder
				outputSheet1.getRow(outputRowCount1+1).createCell(1).setCellValue(acc_holder[deb_count]);
				//amount
				outputSheet1.getRow(outputRowCount1+1).createCell(2).setCellValue(amt[deb_count]);
				//no of credit entries
				outputSheet1.getRow(outputRowCount1+1).createCell(3).setCellValue(credit_count);
				
				
				FileOutputStream fos1 = new FileOutputStream(outputFile1);
				fisi1.close();
				outputWorkbook1.write(fos1);
				fos1.close();
				
				log.info("Successfully written to Date Excel");
				
			
				}catch(Exception e){
				
					log.info("Failed to write to Date Excel");
					loginta.append("Failed to write to Date Excel");
					loginta.newLine();
				}
			
			}
			//////////////////////////////WRITE TO DATE EXCEL/////////////////////////////
			
			
			///////////////////////////////////////////////////////////////////////////////	
			///////////////////////////////////////////////////////////////////////////////
			n = 0;//reset row comparison(credit entries) count
				
			}
			///////////////////////////END LOGIN CAPTURE ERROR/////////////////////////////
			}
			///////////////////////////END-PAYMENT FILE ERROR/////////////////////////////
			}
			////////////////////////////END-PAYMENT FILE LOOP/////////////////////////////
			loginta.append("-------------------------------------------");
			loginta.newLine();
			loginta.newLine();
			loginta.close(); 	
			
		
		
		
		
		
			
	]]></script>
	
	</robot>
</robotics-flow>
		
<export include-original-data="true"></export>

</config>

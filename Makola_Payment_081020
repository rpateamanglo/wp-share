<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config" scriptlang="groovy">

<var-def name="links">
	<datastore name="ceb_billing">
		SELECT * FROM @this
	</datastore>
</var-def> 

<secrets-vault-get alias="makola_maker" />
<secrets-vault-get alias="makola_checker" />

		
<robotics-flow>
<robot driver="universal" name="driver" start-in-private="false" close-on-completion="true">
			<capability name ="SEARCH_ALL_WINDOWS" value="true"/>
			<capability name="CLOSE_ALL_WINDOWS" value="false"/>
			
		<script><![CDATA[
			def BOT_CONFIG = [:]
			links.getWrappedObject().toList().each { property ->
				BOT_CONFIG.put(property.get("name").toString(), property.get("value").toString())
			}
			sys.defineVariable("BOT_CONFIG", BOT_CONFIG)
		]]></script>	
			
			
		<script><![CDATA[
		
			//date
			import java.time.LocalDate;
			import java.time.LocalDateTime;
			import java.time.ZoneId;
			import java.time.format.DateTimeFormatter
			import java.util.*;
			import java.text.SimpleDateFormat;
			
			//screenshot
			import org.apache.commons.io.FileUtils
			
		
			String daily_path = "\\\\muebcyp02fvg02\\eProcessing1\$\\ROBOTICS\\SFI Refund\\2020\\10 October\\08.10.20\\Evening\\"//dateExcelPathStr;//dailyPathStr
			String open_folder_path = "";//
			String dateExcelPath = "";//dateExcelPathStr;

			String debitAmtStr = "1000";//debit_amount;			
			double creditAmt = Double.parseDouble(debitAmtStr)//100.00;
			String reversalAmtStr = "0";//reversal_amt
			double reversalAmt = Double.parseDouble(reversalAmtStr)//100.00;
			double debitAmt = creditAmt - reversalAmt;
			
			//DATASTORE
			//makola portal link
			String makola_portal = (BOT_CONFIG.getWrappedObject().get("makola_portal").toString());
			//debit branch
			String debit_branch = (BOT_CONFIG.getWrappedObject().get("debit_branch").toString());
			//debit account number
			String debit_account = (BOT_CONFIG.getWrappedObject().get("debit_account").toString());
			//credit branch
			String ceb_branch = (BOT_CONFIG.getWrappedObject().get("credit_branch").toString());
			//credit acc
			String ceb_acc = (BOT_CONFIG.getWrappedObject().get("credit_account").toString());
			//workflow reference
			String workflow_reference = (BOT_CONFIG.getWrappedObject().get("workflow_reference").toString());
			//origination reference
			String origination_reference = (BOT_CONFIG.getWrappedObject().get("origination_reference").toString());
			log.info(origination_reference)
			//SECRETS VAULT
			Map entryMap = secureEntryMap.getWrappedObject();
			com.freedomoss.crowdcontrol.webharvest.web.dto.SecureEntryDTO obj = entryMap.get("makola_maker");
			com.freedomoss.crowdcontrol.webharvest.web.dto.SecureEntryDTO obj2 = entryMap.get("makola_checker");
			username1 = obj.getKey().toString();
			password1 = obj.getValue().toString();
			username2 = obj2.getKey().toString();
			password2 = obj2.getValue().toString();
			
			//date
			//LocalDate karanLocal    = LocalDate.parse("2020-05-28"); 							//test for current date
			LocalDate karanLocal    = LocalDate.now()											//live
			LocalDateTime kLDT 		= LocalDateTime.now(ZoneId.of("GMT+04:00"));				//zone timed live
			
			DateTimeFormatter makolaRefFormat = DateTimeFormatter.ofPattern("ddMMyyyy");
			String karanDate = karanLocal.format(makolaRefFormat);
			
			//LOG FILE
			FileWriter fr = new FileWriter(daily_path+"log.txt", true);
			BufferedWriter loginta = new BufferedWriter(fr);
			
			loginta.append("----------------------------------------------------");
			loginta.newLine();
			loginta.append("--BILL PAYMENT MAKOLA--");
			loginta.newLine();
			loginta.newLine();
		
			//////////////////////////////////////////MAKOLA////////////////////////////////////////////
			//////////////////////////////LOGIN TWICE///////////////////////////////
			loginta.append("Maker user- ");
			loginta.append(username1);
			loginta.newLine();
			
			boolean login_capture_pass = true;
			boolean login_verfiy_pass  = true;
				
			for (int c = 0; c < 2; c++){
				//LOGIN
				pageLoadTimeout(100000);
				openChrome(makola_portal);
				try{
					$(byXpath("//*[@id='username']")).sendKeys(username1);
					$(byXpath("//*[@id='password']")).sendKeys(password1);
					pageLoadTimeout(100000);
					$(byXpath("//*[@id='kc-login']")).click();
				}catch(Exception e){
					log.info("Already logged in as- "+username1);
				}
					
				try{
					setFluentWaitTimeout(60000)
					setFluentWaitPollingInterval(300)
					fluentWait()
					 .ignoring(org.openqa.selenium.NoSuchElementException.class)
					 .until(ExpectedConditions.presenceOfElementLocated(By.xpath(('//*[@id="titleHeader"]/div/div/span'))));
				}catch(Exception e){
				}
					
				try{
					login_capture_pass = $(byXpath('//*[@id="titleHeader"]/div/div/span')).is(EXIST);
				}catch(Exception e){
					login_capture_pass = false;
				}
				if(login_capture_pass){
					log.info("Maker Login Successful");
					loginta.append("Maker Login Successful");
					loginta.newLine();
					break;
				}
					
			}
			
			if(!login_capture_pass){
				log.info("Maker Login failed twice. Stopping transaction");
				loginta.append("Maker Login failed twice. Stopping transaction");
				loginta.newLine();
			}
			
			
			/////////////////////////////////LOGIN SUCCESS//////////////////////////////
			if(login_capture_pass){
			///////////////////////////////////////////////////////////////////////////
			//PAYMENT CAPTURE
			try{
				pageLoadTimeout(10000);
				$(byXpath("//*[@id='payment-capture']")).click();
			}catch(Exception e){
				log.info("10s Wait")
				sleep(10000);
				$(byXpath("//*[@id='payment-capture']")).click();
			}
			
			n = 0;
			
			////DEBIT
			sleep(5000);
			if(debit_branch.length() == 1){
				debit_branch = "00"+debit_branch;
			}
			if(debit_branch.length() == 2){
				debit_branch = "0"+debit_branch;
			}
			println(debit_branch)
			println(debit_account)
			$(byXpath("//*[@id='undefined']")).sendKeys(debit_branch);							//branch(hc)
			//$(byXpath("//*[@id='undefined']")).sendKeys(branch);						//branch
			$(byXpath("//*[@id='accountNumber']")).sendKeys(debit_account);				//account number
			sendKeys(Keys.TAB);
			sleep(3000);
			
			//AVAILABLE BALANCE
			String available_bal_str = $(byXpath("/html/body/app-root/div/div/div/payment-capture/div/div/form[1]/div/div[1]/div/div/div[1]/span/h5[1]/b")).text();
			log.info("Available Balance: "+available_bal_str);
			loginta.append("Available Balance: ");
			loginta.append(available_bal_str);		
			loginta.newLine();
			
			//purpose of payment
			if($(byXpath("//*[@id='paymentPurpose_customselect']")).is(PRESENT)){	
				$(byXpath("/html/body/app-root/div/div/div/payment-capture/div/div/form[1]/div/div[2]/div[2]/div[1]/div/div/sol-custom-select/div/div")).click();
				$(byText("Bill Payment")).click();
			}
			
			//posting option = Consolidated
			$(byXpath("/html/body/app-root/div/div/div/payment-capture/div/div/form[1]/div/div[2]/div[2]/div[2]/div/div[1]/div/div/div/sol-radio[2]/label/span[2]")).click();
			
			//Force Post->removed 240420	
			$(byXpath("/html/body/app-root/div/div/div/payment-capture/div/div/form[1]/div/div[2]/div[2]/div[2]/div/div[2]/div/div[2]/sol-checkbox/label")).click();
			
			//Origination reference
			$(byXpath("//*[@id='instructionOriginationReference']")).sendKeys(origination_reference);
			
			//workflow reference
			$(byXpath("//*[@id='workflowReference']")).sendKeys(workflow_reference);
			
			
			
			log.info("Debit Entry Done");
			loginta.append("Debit entry has been successfully been entered into the system.");			
			loginta.newLine();
			
			sleep(5000);
			
			////CREDIT
			//CEB
			$(byXpath("//*[@id='bankCode0']")).text("03"); 					//bank code
			if(ceb_branch.length() == 1){
				ceb_branch = "00"+ceb_branch;
			}
			if(ceb_branch.length() == 2){
				ceb_branch = "0"+ceb_branch;
			}
			$(byXpath("//*[@id='branchId0']")).sendKeys(ceb_branch);				//branch(hc)
			$(byXpath("//*[@id='accountNumber0']")).sendKeys(ceb_acc);		//account number
			//origination ref 
			String payment = "Payments "+ karanDate;
			try{
				$(byXpath("//*[@id='originationReference0']")).sendKeys(payment);
				log.info("Filling Origination Reference");
			}catch(Exception e){}	
			
			//destination ref 
			def dest_ref = $(byXpath("//*[@id='destinationReference0']"));
			if(dest_ref.val() == ""){
				dest_ref.sendKeys(payment);
			}
			
			
			
			//amount
			try{
				$(byXpath("//*[@id='amount0']")).sendKeys(String.format("%.2f",debitAmt));
			}catch(Exception e){log.info("Error inputing amount "+e)}
			
			
			
			log.info("Credit Entry Done");
			loginta.append("Credit entry has been successfully been entered into the system.");			
			loginta.newLine();	
			sleep(7000);
			/* 
			/////////////////////////////////VERIFY MATCH///////////////////////////////
			def gross_cred_amount = $(byXpath("/html/body/app-root/div/div/div/payment-capture/div/div/form[2]/div/div[3]/h4[3]/span")).getText();
			String[] list_cred_amount = gross_cred_amount.split(" ");
			String cred_amount = list_cred_amount[1];

			//review
			def review = $(byXpath("/html/body/app-root/div/div/div/payment-capture/sol-footer/div/div/span[3]/footer-primary/button")).is(ENABLED);
			
			Double cred_amount_final = Double.parseDouble(cred_amount.replace(",",""));

		
			if(review){
				//review button
				$(byXpath("/html/body/app-root/div/div/div/payment-capture/sol-footer/div/div/span[3]/footer-primary/button")).click();	
				//submit button
				sleep(3000);
				$(byXpath("/html/body/app-root/div/div/div/payment-review/sol-footer/div/div/span[3]/footer-primary/button")).waitUntil(VISIBLE);
					
				try{
				//$(byXpath("/html/body/app-root/div/div/div/payment-review/sol-footer/div/div/span[3]/footer-primary/button")).click();
				$(byText("Submit for authorisation")).click();
				log.info("Submitted for Authorisation");
				}catch(Exception e){}
				loginta.append("Transaction Successfully Reviewed and Submitted. Waiting for Confirmation of Supervisor")
				loginta.newLine();
					
			}
			else{
					
				loginta.append("Balance Matched but Cannot Review Transaction. Something Wrong");
				loginta.newLine();	
				review_error = true;
				log.info("Balance Matched but Cannot Review Transaction. Something Wrong");
					
			}
					
			/////////////////////////////////VERIFY MATCH///////////////////////////////
			//take screenshot if error
			if(review_error){
				try{
					File screenshotFile = new File(daily_path+"makola_capture_err.png");
					screenshotFile.createNewFile();
					byte[] screenShot = driver().getScreenshotAs(OutputType.BYTES)   
					FileUtils.writeByteArrayToFile(screenshotFile, screenShot);
				}catch(Exception ex){log.info("Screenshot not taken");}
			}	
			sleep(7000);
			*/
				
			int x = 1;
			
			///////////////////////////////APPROVE PAYMENT////////////////////////////////
			if(!review_error){	//check if payment file submitted
			//////////////////////////////////////////////////////////////////////////////
					
				for (int d = 0; d < 2; d++){	//login twice
					//LOGIN
					//pageLoadTimeout(100000);
					//openChrome(makola_portal);
					try{
						//logout
						$(byXpath("/html/body/app-root/div/div/sol-header/div/sol-header-masthead/div[3]/div/div/ul/li/span")).click();
						$(byText("Sign Out")).click();
						sleep(3000);
					}catch(Exception e){
						log.info("Logged out of Maker User- "+username1);
					}
					
					try{
						setFluentWaitTimeout(60000)
						setFluentWaitPollingInterval(300)
						fluentWait()
						 .ignoring(org.openqa.selenium.NoSuchElementException.class)
						 .until(ExpectedConditions.presenceOfElementLocated(By.xpath(("//*[@id='username']"))));
					}catch(Exception e){
					}
					
					
					$(byXpath("//*[@id='username']")).sendKeys(username2);
					$(byXpath("//*[@id='password']")).sendKeys(password2);
					pageLoadTimeout(100000);
					$(byXpath("//*[@id='kc-login']")).click();
					
					try{
						setFluentWaitTimeout(60000)
						setFluentWaitPollingInterval(300)
						fluentWait()
						 .ignoring(org.openqa.selenium.NoSuchElementException.class)
						 .until(ExpectedConditions.presenceOfElementLocated(By.xpath(('//*[@id="titleHeader"]/div/div/span'))));
					}catch(Exception e){
					}
					
					sleep(10000);
					
					try{
						login_verify_pass = $(byText("Task List")).is(EXIST);
					}catch(Exception e){
						login_verify_pass = false;
					}
					if(login_verify_pass){
						loginta.append("Checker Login Successful");
						loginta.newLine();
						break;
					}
					
				}
				
				if(!login_verify_pass){
					log.info("Checker Login failed twice. Stopping transaction");
					loginta.append("Checker Login failed twice. Stopping transaction");
					loginta.newLine();
				}
				
				
				//////////////////////////LOGIN VERIFY ERROR////////////////////////////////
				if(login_verify_pass){
				////////////////////////////////////////////////////////////////////////////
				
				//TASK LIST
				try{
					$(byText("Task List")).click();
				}catch(Exception e){
					log.info("10s Wait")
					sleep(10000);
					$(byText("Task List")).click();
				}
				
				sleep(5000);
				
				int trans_count = 0;
				int y = 1;
				boolean trans_end = false;
				def trans;
				//count how many transactions present 
				while(!trans_end){	
					try{
						//count no of transactions
						trans = $(byXpath("//*[@id='taskListDatatable']/div/datatable-body/datatable-selection/datatable-scroller/datatable-row-wrapper["+x+"]/datatable-body-row/div[2]/datatable-body-cell[2]/div/div")).getText();
						//println("TRANS--> "+trans)
						trans_count++;
					}catch(Exception e){
						//log.info("Transaction End")
						trans_end = true;
					}
					x++;	
				}
				//log.info("No of transactions in Task List "+trans_count); 
				
				boolean duplicate = false;
				Double credit_holders_amt_cmp;
				
				while(y <= trans_count){			//loop through all transactions
				
					trans = $(byXpath("//*[@id='taskListDatatable']/div/datatable-body/datatable-selection/datatable-scroller/datatable-row-wrapper["+trans_count+"]/datatable-body-row/div[2]/datatable-body-cell[2]/div/div")).getText();
		
					//open transaction to validate
					if(trans.equals(acc_holder_name_debit)){	//if workflow ref is same as debit holder
						//VERIFY AND VALIDATE PAYMENT
						if(!duplicate){							
						$(byXpath("//*[@id='taskListDatatable']/div/datatable-body/datatable-selection/datatable-scroller/datatable-row-wrapper["+trans_count+"]/datatable-body-row/div[2]/datatable-body-cell[6]/div/div/div")).click();
						
						sleep(4000);
						
						String trans_id = $(byXpath("//*[@id='paymentId']")).text();
						log.info(trans_id)
						loginta.append(trans_id);
						loginta.newLine();
							
						//VALIDATE PAYMENT
						boolean cred_end = false;
						int a = 0;
						String cred;
						int cred_verif_count = 0;
						//count how many credit entries in verification--must be 1
						while(!cred_end){
							try{
								cred = $(byXpath("//*[@id='"+a+"-amount']")).getText();
								cred_verif_count++;
							}catch(Exception e){
								cred_end = true;
							}
							a++;
						}
						log.info("Number of credit entries: "+ cred_verif_count);
						//loginta.append("Number of credit entries: "+ cred_verif_count);
						//loginta.newLine();
						
						int match_count = 0;
						if(cred_verif_count == credit_count_maks){
							log.info("No of rows captured matches the no of rows to be verified");
							loginta.append("No of rows captured matches the no of rows to be verified");
							loginta.newLine();
							//loop through amount list to see if it matches
							for(int z=0; z < credit_count_maks; z++){
								
								cred = $(byXpath("//*[@id='"+z+"-amount']")).getText();
								cred = cred.replace(",","");
								Double cred_val = Double.parseDouble(cred);
								
								credit_holders_amt_cmp = credit_holders_amt[z];
								
														
								if(cred_val == credit_holders_amt_cmp){

									match_count++;
								}
							}
						}
						
						approved = false;
						
						//approve payment if all transactions matched
						if(match_count == credit_count_maks){
							//approve
							log.info("All Rows Matched. Ready to Approve");
							$(byText("Approve payment")).click();
							//$(byText("Cancel")).click();	//for testing
							
							loginta.append("Row Matched. Approved");
							loginta.newLine();
							
							approved = true;
						}
						//else if all rows not matched- decline payment
						else{
							log.info("Row not matched. Declining payment");
							$(byText("Decline payment")).click();
							sleep(3000);
							$(byText("Other")).click();
							$(byXpath("//*[@id='rejectReasonText']")).sendKeys("Credit entry to be verified not matching with captured credit entry");
							sleep(2000);
							$(byText("Decline")).click();
							sleep(5000);
							
							loginta.append("Payment Declined. Credit entry to be verified not matching with captured credit entry");
							loginta.newLine();
						}
						
						
						//$(byText("Cancel")).click();	//for testing
						sleep(3000);
						
						duplicate = true;
						}
						
						//DECLINE PAYMENT(DUPLICATE)
						else if(duplicate){
							log.info("Duplicate Found");
							$(byXpath("//*[@id='taskListDatatable']/div/datatable-body/datatable-selection/datatable-scroller/datatable-row-wrapper["+trans_count+"]/datatable-body-row/div[2]/datatable-body-cell[6]/div/div/div")).click();
							sleep(5000);
							$(byText("Decline payment")).click();
							sleep(3000);
							$(byText("Other")).click();
							$(byXpath("//*[@id='rejectReasonText']")).sendKeys("Duplicate Capture");
							sleep(2000);
							$(byText("Decline")).click();
							sleep(5000);
							
							loginta.append("Duplicate Payment(s) Declined");
							loginta.newLine();
						}
						
						
						
					}
					
				trans_count--;
				}
				
				/* //MOVE ERROR FILES TO DAILY FOLDER
				File open_folder = new File(open_folder_path);
				File[] filesList = open_folder.listFiles();
				for(File file : filesList){
					if(file.getName().contains("ABSA_ERR")){
						File error_file_daily = new File(daily_path+file.getName())
						Files.move(file.toPath(),error_file_daily.toPath());
					}
				} */
				////
				//////////////////////////////LOGIN VERIFY ERROR///////////////////////////////		
				}			
			//////////////////////////////////////////////////////////////////////////////		
			}
			///////////////////////////////APPROVE PAYMENT//////////////////////////////// 
					
			

					
			//////////////////////////////WRITE TO DATE EXCEL/////////////////////////////
			if(approved){
				
				try{
				//TO(DATE EXCEL)
				outputFile1 = new File(dateExcelPath); 
				FileInputStream fisi1 = new FileInputStream(outputFile1);
						
				XSSFWorkbook outputWorkbook1 = new XSSFWorkbook(fisi1);
				XSSFSheet outputSheet1 = outputWorkbook1.getSheet("bill_payment");	//change sheet name
				
				int outputRowCount1 = outputSheet1.getLastRowNum();//GET LAST OUTPUT EXCEL ROW
			
				
				//date
				outputSheet1.createRow(outputRowCount1+1).createCell(0).setCellValue(karanDate);
				//debit/credit amount
				outputSheet1.getRow(outputRowCount1+1).createCell(1).setCellValue(debitAmt);
				//reversal made by bot
				outputSheet1.getRow(outputRowCount1+1).createCell(2).setCellValue(reversalAmt);
				//total reversal
				//outputSheet1.getRow(outputRowCount1+1).createCell(3).setCellValue(final_reversal);
				
				
				FileOutputStream fos1 = new FileOutputStream(outputFile1);
				fisi1.close();
				outputWorkbook1.write(fos1);
				fos1.close();
				
				log.info("Successfully written to Date Excel");
				//send mail to inform of successful run
				success_mail = true;
				subject = "CEB Bill Payment Successful"
				body = "Please find attached log in mail."
				
				
				}catch(Exception e){
				
					log.info("Failed to write to Date Excel"+e);
					loginta.append("Failed to write to Date Excel");
					loginta.newLine();
				}
			
			}
			//////////////////////////////WRITE TO DATE EXCEL/////////////////////////////
			
			
			
			loginta.append("----------------------------------------------------");
			loginta.newLine();
			loginta.newLine();
			loginta.close(); 
		
		]]></script>
	
	</robot>
</robotics-flow>

<export include-original-data="true">
	 <single-column name="debit_amount" value="${debit_amount}"/>
</export>

</config>

<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config" scriptlang="groovy">


		
<robotics-flow>
<robot driver="universal" start-in-private="false">
			<capability name ="SEARCH_ALL_WINDOWS" value="true"/>
			<capability name="CLOSE_ALL_WINDOWS" value="false"/>
		<script><![CDATA[
		
			//openAndFocus("C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\EXCEL.EXE D:\\file-name.xlsx", 5000, 300)
		
			import java.nio.file.Files
			import org.apache.commons.io.FileUtils;
			import java.io.File;
			import java.io.FileInputStream;
			import java.io.FileOutputStream;
			import java.util.*;
			import java.text.SimpleDateFormat;
			
			import java.nio.file.FileSystem;
			import java.nio.file.FileSystems;
			import java.nio.file.Files;
			import java.nio.file.Path;
			import java.nio.file.StandardCopyOption;
		
			import org.apache.poi.xssf.usermodel.*;
			import org.apache.poi.ss.usermodel.*;
			import org.apache.poi.hssf.usermodel.*;
			import java.text.SimpleDateFormat;
			import org.apache.poi.ss.usermodel.DateUtil
			
			import com.workfusion.studio.rpa.recorder.api.*
			import com.workfusion.studio.rpa.recorder.api.types.*
			import com.workfusion.studio.rpa.recorder.api.custom.*
			import com.workfusion.studio.rpa.recorder.api.internal.representation.*
			import com.workfusion.bot.exception.*
			
			//DIRECTORY
			String Dir = "C:\\Users\\NanoBNK\\Desktop\\testBarclays\\"
			
			//BROWSE FOR PAYMENT FILES
			List<String> results = new ArrayList<String>();
      		File[] files = new File(Dir).listFiles();      
			String num_of_files = new File(Dir).listFiles().length;
			log.info("Number of files present : "+num_of_files)
			int count = 0;

        	for (File file : files){
				if(file.isFile()){
					if(file.getName().contains("payment") || file.getName().contains("Payment")){
						results.add(file.getName());
						count++;
					}
				}
			}

           log.info("File Name : "+results);
		   log.info("Numburr of payment files: "+count);
 	
	

			List bank = new ArrayList();
			List branch = new ArrayList();
			List acc_num = new ArrayList();
			List acc_holder = new ArrayList();
			List ref = new ArrayList();
			List amt = new ArrayList();
			List indicator = new ArrayList();																					

 			Date karanDatos = new Date();
 			SimpleDateFormat karanDatelos = new SimpleDateFormat("dd/MM/yyyy");
 			String karanDate = karanDatelos.format(karanDatos);
 			SimpleDateFormat dateExcelFormat = new SimpleDateFormat("MMMM "+"yyyy");
 			String dateExcel = dateExcelFormat.format(karanDatos);
 			
 			String dateExcelPath = Dir+dateExcel+".xlsx";
 			String dateExcelTemplatePath = Dir+"Makola_excel_template.xlsx";
 			
 			//PRESENCE CHECK DATE EXCEL
 			File dateExcelFile = new File(dateExcelPath);
 			if(!dateExcelFile.exists()){
 				log.info("Creating Monthly Excel")
 				//Create new file
				FileOutputStream dateFos = new FileOutputStream(Dir+dateExcel+".xlsx");
				Workbook dateWb = new XSSFWorkbook();
				XSSFSheet dateSheet = dateWb.createSheet("makola");

				dateWb.write(dateFos);
				dateFos.close();
				
				//copy header
				openExcel(dateExcelTemplatePath);
				setActiveCell(dateExcelTemplatePath, 'A1');
				
				def fileData = getRange(dateExcelTemplatePath, 'A1', 'D1');
				openExcel(dateExcelPath);
				setRange(dateExcelPath, 'A1', 'D1', fileData);
			
				saveExcel(dateExcelPath);
				
				closeExcel(dateExcelTemplatePath);
				closeExcel(dateExcelPath);
				
 			}

 			
			
			/////////////////////////////PAYMENT FILES LOOP////////////////////////////
			for(int i = 0; i < results.size(); i++){
			/////////////////////////////PAYMENT FILES LOOP////////////////////////////
			
			/////////////////////////////////GATHER DATA////////////////////////////
			int credit_count = 0;
			File inputFile1 = null;
			bank.clear();
			branch.clear();
			acc_num.clear();
			acc_holder.clear();
			ref.clear();
			amt.clear();
			indicator.clear();
			try{
				//FROM(PAYMENT EXCEL)
				inputFile1 = new File(Dir+results[i]);
				FileInputStream fis1 = new FileInputStream(inputFile1);
				XSSFWorkbook inputWorkbook1 = new XSSFWorkbook(fis1);
				XSSFSheet inputSheet1 = inputWorkbook1.getSheetAt(0); 
								
				int rowCount1 = inputSheet1.getLastRowNum();
				log.info(rowCount1+" rows in inputsheet: "+inputSheet1.getSheetName());
				
				
				//TO(DATE EXCEL)
				outputFile1 = new File(Dir+dateExcel+".xlsx"); 
				FileInputStream fisi1 = new FileInputStream(outputFile1);
				    
				XSSFWorkbook outputWorkbook1 = new XSSFWorkbook(fisi1);
				XSSFSheet outputSheet1 = outputWorkbook1.getSheet("makola");
			
				
			    int currentRowIndex1=1;//READ FROM SECOND ROW
			    
			    int outputRowCount1 = outputSheet1.getLastRowNum();//GET LAST OUTPUT EXCEL ROW
			    
							               
				Iterator rowIterator1 = inputSheet1.iterator();
				
			while(rowIterator1.hasNext())
			{
		
			
				Row currentRow1 = inputSheet1.getRow(currentRowIndex1);
				
				if(currentRow1 == null){log.info("Brokeman");break;}
				Cell blankCheck1 = currentRow1.getCell(0,Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
				if(blankCheck1 == null){log.info("Brokeman Cell");break;}
				
						String value1 = "";
						Cell cellData1 = null;
						DataFormatter formatter1 = null;
						Cell debitCell = null;
						for(int currentCellIndex1 = 0; currentCellIndex1 < 9; currentCellIndex1++){
							cellData1 = currentRow1.getCell(currentCellIndex1,Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
							debitCell = currentRow1.getCell(6,Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);//----->INDICATOR CELL (DEBIT OR CREDIT)
							formatter1 = new DataFormatter();
							debitCheck = formatter1.formatCellValue(debitCell);
							value1 = formatter1.formatCellValue(cellData1);
					
								switch(currentCellIndex1){
									
									case 0:	//BANK
										bank.add(value1);
										break;
									
									case 1://BRANCH
										branch.add(value1);
										break;
										
									case 2://ACCOUNT NUMBER
										acc_num.add(value1);
										break;
										
									case 3://ACCOUNT HOLDER
										acc_holder.add(value1);
										
										if(debitCheck.equalsIgnoreCase("d")){
											outputSheet1.createRow(outputRowCount1+1).createCell(1).setCellValue(value1);
										}
										
										break;
										
									case 4://REFERENCE
										ref.add(value1);
										break;
										
									case 5://AMOUNT
										amt.add(value1);

										if(debitCheck.equalsIgnoreCase("d")){
											outputSheet1.getRow(outputRowCount1+1).createCell(2).setCellValue(value1);
										}
										
										break;
										
					
									case 6://CREDIT OR DEBIT
										indicator.add(value1);
										if(value1.equalsIgnoreCase("c")){
											credit_count++;
										}
										break;
									
									
								}
								
	
						}
						currentRowIndex1++;
						
			}
			outputSheet1.getRow(outputRowCount1+1).createCell(0).setCellValue(karanDate);		//WRITE INTO DATE(DATE EXCEL)
			outputSheet1.getRow(outputRowCount1+1).createCell(3).setCellValue(credit_count);	//WRITE INTO NO OF CREDIT ENTRIES(DATE EXCEL)
			
			inputWorkbook1.close();
			fis1.close();
			
			FileOutputStream fos1 = new FileOutputStream(outputFile1);
			fisi1.close();
			outputWorkbook1.write(fos1);
			fos1.close();

			}catch(Exception e){
			log.info("Error reading input file");
			e.printStackTrace();} 
			
			println("BANK: "+bank);
			println("BRANCH: "+branch);
			println("ACC NUM: "+acc_num);
			println("ACC HOLDER: "+acc_holder);
			println("REF: "+ref);
			println("AMT: "+amt);
			println("INDIE: "+indicator);
			println("CREDIT_COUNT: "+credit_count);
			
			/////////////////////////////////GATHER DATA////////////////////////////
			
			
			////////////////////////////////LOOP////////////////////////////////////
			}
			////////////////////////////////LOOP////////////////////////////////////
			
	]]></script>
	
	</robot>
</robotics-flow>
		
<export include-original-data="true"></export>

</config>

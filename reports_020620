<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config" scriptlang="groovy">


<var-def name="links">
	<datastore name="mcib_reports">
		SELECT * FROM @this
	</datastore>
</var-def> 

<secrets-vault-get alias="bom_portal" />

		
<robotics-flow>
<robot driver="universal" start-in-private="false">
			<capability name ="SEARCH_ALL_WINDOWS" value="true"/>
			<capability name="CLOSE_ALL_WINDOWS" value="false"/>
		<script><![CDATA[
		
			import java.nio.file.Files
			import org.apache.commons.io.FileUtils;
			import java.io.File;
			import java.io.FileInputStream;
			import java.io.FileOutputStream;
			import java.util.*;
			import java.text.SimpleDateFormat;
		
			import org.apache.poi.xssf.usermodel.*;
			import org.apache.poi.ss.usermodel.*;
			import org.apache.poi.hssf.usermodel.*;
			import java.text.SimpleDateFormat;
			import org.apache.poi.ss.usermodel.DateUtil
			
			import com.workfusion.studio.rpa.recorder.api.*
			import com.workfusion.studio.rpa.recorder.api.types.*
			import com.workfusion.studio.rpa.recorder.api.custom.*
			import com.workfusion.studio.rpa.recorder.api.internal.representation.*
			import com.workfusion.bot.exception.*
			
			////DATASTORE
			//DIRECTORY
			String Dir = links.get(0).getAt("path").toString();
			//MAIL SUBJECT
			String mail_subject_essential_oils = links.get(0).getAt("mail_subject").toString();
			//BOM PORTAL GROUP
			String group = links.get(0).getAt("bom_portal_group").toString();//BARC
			
			//SECRETS VAULT
			Map entryMap = secureEntryMap.getWrappedObject();
			com.freedomoss.crowdcontrol.webharvest.web.dto.SecureEntryDTO obj = entryMap.get("bom_portal");
			user = obj.getKey().toString();
			pass = obj.getValue().toString();
				
			//CURRENT DATE
			Date currDate = new Date();
			String currdt_folder = new SimpleDateFormat("ddMMyyyy").format(currDate);
			String currdt_log = new SimpleDateFormat("dd/MM/yy").format(currDate);
			String direstraits =  Dir+currdt_folder+"\\"; //location of daily folder
			
			def inputExcelPath = Dir+"MCIB_INPUTFILE.xlsx";
			def logPath = Dir+"MCIB_LOG.xlsx";
			def issueLogPath = Dir+"MCIB_ISSUE_LOG.xlsx";
			def imagePath = Dir+"MCIB_REPORTS_IMAGES";
			

			List name = new ArrayList();
			List requestor = new ArrayList();
			List branch = new ArrayList();
			List entity_code = new ArrayList();
			List entity_type = new ArrayList();
			List segment = new ArrayList();
			
 			List billed = new ArrayList();
 			List presidency = new ArrayList();//resident or non-resident
 			List country = new ArrayList();//country 
 			
 			List exceptEntity = new ArrayList();
 			List except = new ArrayList();
 			List entity_code_success = new ArrayList();																						

			Date karanDatos = new Date();
			SimpleDateFormat karanDatelos = new SimpleDateFormat("dd/MM/yyyy");
			String karanDate = karanDatelos.format(karanDatos);
			
			/////////////////////////////////CREATE FOLDER////////////////////////////
			
			File dailyFolder = new File(direstraits);
			if(!dailyFolder.exists()){
				dailyFolder.mkdir();
			}
			
			
			/////////////////////////////////GATHER DATA////////////////////////////
			File inputFile1 = null;
			try{
				//FROM
				inputFile1 = new File(inputExcelPath);
				FileInputStream fis1 = new FileInputStream(inputFile1);
				XSSFWorkbook inputWorkbook1 = new XSSFWorkbook(fis1);
				XSSFSheet inputSheet1 = inputWorkbook1.getSheetAt(0); 
								
				int rowCount1 = inputSheet1.getLastRowNum();
				log.info(rowCount1+" rows in inputsheet: "+inputSheet1.getSheetName());
			
				
			    int currentRowIndex1=1;//CHANGE
							               
				Iterator rowIterator1 = inputSheet1.iterator();
				
			while(rowIterator1.hasNext())
			{
		
			
				Row currentRow1 = inputSheet1.getRow(currentRowIndex1);
				
				if(currentRow1 == null){log.info("Brokeman");break;}
				Cell blankCheck1 = currentRow1.getCell(0,Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
				if(blankCheck1 == null){log.info("Brokeman Cell");break;}
				
						String value = "";
						for(int currentCellIndex1 = 0; currentCellIndex1 < 18; currentCellIndex1++){//0-18//A-R
							Cell cellData1 = currentRow1.getCell(currentCellIndex1,Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
							DataFormatter formatter1 = new DataFormatter();
							value1 = formatter1.formatCellValue(cellData1);
							
								switch(currentCellIndex1){
									
									case 1:	//requestor name
										requestor.add(value1);
										break;
									
									case 2://branch/department
										branch.add(value1);
										break;
										
									case 3://client name
										name.add(value1);
										break;
										
									case 4://entity code
										entity_code.add(value1);
										break;
										
									case 5://segment
										segment.add(value1);
										break;
										
									case 6://entity type
										entity_type.add(value1);
										break;
										
					
									case 7://resident/non-resident
										presidency.add(value1);
										break;
									
									case 8://country
										country.add(value1);
										break;
								}
								//System.out.println("current row index" + currentRowIndex2);
								//System.out.println("current cell index"+ currentCellIndex);
								
								//System.out.println("row: "+printRowIndex1);
								//System.out.println("cell: "+currentCellIndex1);
								//System.out.println("FUR AUD: "+value);
	
						}
						currentRowIndex1++;
						
					
				
							
			}
			inputWorkbook1.close();
			fis1.close();
		
		
			//System.out.println((currentRowIndex-1)+" rows added to outputsheet "+outputSheet.getSheetName());
			//System.out.println();
			
			}catch(Exception e){
			log.info("Error reading input file");
			e.printStackTrace();} 
			
			println("REQUESTOR: "+requestor);
			println("BRANCH: "+branch);
			println("NAME: "+name);
			println("CODE: "+entity_code);
			println("SEGMENT: "+segment);
			println("TYPE: "+entity_type);
			println("CITIZENSHIP: "+presidency);
			println("COUNTRY: "+country);
			
			/////////////////////////////////GATHER DATA////////////////////////////
			
			
		
			
			////////////////////////////PRE-REQUISITES SERVLET////////////////////////
			
			openIE('http://10.103.2.128:7778/forms/frmservlet?config=bom');
			
			boolean java_form_presence_bool = false;
			//presence of java applet
			while(java_form_presence_bool == false){
	
				try{
					$(byImage("${imagePath}/form.png")).getCoordinates();
					java_form_presence_bool = true;
				}catch(Exception e){
					java_form_presence_bool = false;
					log.info("Dialog Found!");
				}
				//java update dialog
				//${imagePath}/run_this_time.png -->put all in same path
				sleep(2000);
				boolean java_update_check_bool = false;
				try{
					$(byImage("${imagePath}/run_this_time.png")).getCoordinates();
					java_update_check_bool = true;				
				}catch(Exception e){
					java_update_check_bool = false;
				}
				if(java_update_check_bool == true){
					$(byImage("${imagePath}/run_this_time.png")).click();
					log.info("Java Update passed");			
				}
				
				//java security dialog 1
				boolean java_security_check_bool = false;
				try{
					$(byImage("${imagePath}/run_checkbox.png")).getCoordinates();
					$(byImage("${imagePath}/run.png")).getCoordinates();
					java_security_check_bool = true;
				}catch(Exception e){
					java_security_check_bool = false;			
				}
				
				if(java_security_check_bool == true){
					$(byImage("${imagePath}/run_checkbox.png")).click();	
					$(byImage("${imagePath}/run.png")).click();
					log.info("Java Security 1(Run) passed");	
				}
				
		
				//java security dialog 2
				boolean java_security_check_bool_2 = false;
				try{
					$(byImage("${imagePath}/continue.png")).getCoordinates();
					java_security_check_bool_2 = true;
				}catch(Exception e){
					java_security_check_bool_2 = false;
				}
				if(java_security_check_bool_2 == true){
						$(byImage("${imagePath}/continue.png")).click();
						log.info("Java Security 2(Continue) passed");	
				}
				
				
				//java security dialog 3
				boolean java_security_check_bool_3 = false;
				try{
					$(byImage("${imagePath}/unblock.png")).getCoordinates();
					java_security_check_bool_3 = true;
				}catch(Exception xamal){
					java_security_check_bool_3  = false;
				}
				
				if(java_security_check_bool_3 == true){	
					$(byImage("${imagePath}/unblock.png")).click();
					log.info("Java Security 3(Unblock) passed");		
				}
		
				//error dialog
				boolean error_dialog_bool = false;
				try{
					$(byImage("${imagePath}/ok.png")).getCoordinates();
					error_dialog_bool = true;
				}catch(Exception e){
					error_dialog_bool = false;
				}
				if(error_dialog_bool == true){
					$(byImage("${imagePath}/ok.png")).click();
					log.info("Error Dialog passed");
				}
			
			}
			
		sleep(2000);
		
		///////////////////PRE-REQUISITES////////////////////////////
		
		
		
		////////////////////////////////////LOGIN MCIB//////////////////////////////////

		sendKeys(user);
		sendKeys("{TAB}");
		sendKeys(pass);
		sendKeys("{TAB}");
		sendKeys(group);
		sendKeys("{TAB}");
		pressEnter();
		
		////////////////////////////////////LOGIN MCIB//////////////////////////////////
		
		
		
		//////////////////////////////////////LOOP////////////////////////////////////
outtaloop: for(int i = 0; i < entity_code.size(); i++){	
				
				log.info("Current Entity: "+entity_code[i]);
				
				sendKeys("{ALT}");
				sendKeys("{RIGHT 5}");
				
				////////////////////////////////////INDIVIDUAL/////////////////////////////////
				if(entity_type[i].equalsIgnoreCase("I")){ //change accordingly
					
					log.info("Indie");
					//ENTER ON "INDIVIDUAL CREDIT PROFILE REPORT"
					sendKeys("{DOWN}");
					pressEnter();
					
					//ENTITY CODE(customer not available exception--to solve)
					sendKeys(entity_code[i]);
					sendKeys("{TAB}");
					sleep(1000);
					
					//ENTITY CODE EXCEPT
					boolean entity_cust_except = false;
					try{
						$(byImage("${imagePath}/entity_code_except.png")).getCoordinates();
						//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
						entity_cust_except = true;				
					}catch(Exception e){
						entity_cust_except = false;
						//log.info("nah bruuuh")
					}
					if(entity_cust_except == true){
						pressEnter();
						log.info("Error: Customer not available");
						exceptEntity.add(entity_code[i]);
						except.add("Customer not available");
						billed.add("N/A");
							
						if(presidency[i].equalsIgnoreCase("resident")){
						
							//----------REMOVE COMMENTS FOR LIVE------------------
							//EXIT
							boolean entity_except_exit = false;
							try{
								$(byImage("${imagePath}/exit.png")).getCoordinates();
								//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
								entity_except_exit = true;
								log.info("Exit Button Found");				
							}catch(Exception e){
								entity_except_exit = false;
								log.info("Exit Button Not Found");
							}
							if(entity_except_exit == true){
								$(byImage("${imagePath}/exit.png")).click();
								log.info("Exit");			
							}
							sleep(2000);
								
							continue outtaloop;
						}			
 					}
					
					
					//NON-RESIDENT
					if(!presidency[i].equalsIgnoreCase("resident")){	//change accordingly
						
						
						//sendkeys method of choosing non-resident does not work properly
						log.info("Non-Presidency");
		// 				sendKeys("{TAB 2}");
		// 				sendKeys("{DOWN}");
		
						//NON-RESIDENT SELECT(byImage)
						boolean nri = false;
						try{
							$(byImage("${imagePath}/non_resident.png")).getCoordinates();
							//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
							nri = true;				
						}catch(Exception e){
							nri = false;
							log.info("Dropdown Not Found")
						}
						if(nri == true){
							$(byImage("${imagePath}/non_resident.png")).click();
							log.info("Dropdown Clicked");			
						}
						sendKeys("{DOWN}")
						pressEnter();
				
						//COUNTRY SELECT
						boolean country_bool = false;
						try{
							$(byImage("${imagePath}/country.png")).getCoordinates();
							//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
							country_bool = true;				
						}catch(Exception e){
							country_bool = false;
							log.info("nah bruuuh")
						}
						if(country_bool == true){
							$(byImage("${imagePath}/country.png",30,0)).click();
							log.info("Country Textbox Selected");			
						}
						sendKeys(country[i]);
						
					}
					
					
					//SAVE REPORTS TO DISK
					boolean save_bool = false;
					try{
						$(byImage("${imagePath}/save_reports.png")).getCoordinates();
						//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
						save_bool = true;				
					}catch(Exception e){
						save_bool = false;
						log.info("nah bruuuh")
					}
					if(save_bool == true){
						$(byImage("${imagePath}/save_reports.png")).click();
						log.info("Save Reports Selected");			
					}
					
					
					//GENERATE REPORTS
					boolean generate_bool = false;
					try{
						$(byImage("${imagePath}/generate_reports.png")).getCoordinates();
						//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
						generate_bool = true;				
					}catch(Exception e){
						generate_bool = false;
						log.info("report gen click error")
					}
					if(generate_bool == true){
						$(byImage("${imagePath}/generate_reports.png")).click();
						log.info("Generate Reports Selected");			
					}
					
					
					//INVALID ENTITY(RESIDENT INDIVIDUAL) EXCEPTION
					boolean entity_except_res_indie = false;
					try{
						$(byImage("${imagePath}/resident_individual_invalid_entity_except.png")).getCoordinates();
						//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
						entity_except_res_indie = true;				
					}catch(Exception e){
						entity_except_res_indie = false;
					}
					if(entity_except_res_indie == true){
						pressEnter();
						log.info("Invalid Entity Code(Resident Individual)");	
						exceptEntity.add(entity_code[i]);
						except.add("Invalid Entity Code(Resident Individual)");
						billed.add("N/A");
						
						//----------REMOVE COMMENTS FOR LIVE------------------
							//EXIT
							boolean entity_except_indie_exit = false;
							try{
								$(byImage("${imagePath}/exit.png")).getCoordinates();
								//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
								entity_except_indie_exit = true;
								log.info("Exit Button Found");				
							}catch(Exception e){
								entity_except_indie_exit = false;
								log.info("Exit Button Not Found");
							}
							if(entity_except_indie_exit == true){
								$(byImage("${imagePath}/exit.png")).click();
								log.info("Exit");			
							}
							sleep(2000);
							
							continue outtaloop;
								
					}
					
					
					//BROWSE & SAVE REPORT
					sendKeys(direstraits+entity_code[i]);
					pressEnter();
					
					
					//REPORT SAVED
					boolean file_success = false;
					try{
						$(byImage("${imagePath}/success_ok.png")).getCoordinates();
						//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
						file_success = true;
						log.info("File Successfully Saved");				
					}catch(Exception e){
						file_success = false;
						log.info("File Not saved");
					}
					if(file_success == true){
						$(byImage("${imagePath}/success_ok.png")).click();
						log.info("File Download Handled");
						entity_code_success.add(entity_code[i]);			
					}
					
					//BILLED VERIFICATION BYIMAGE REMOVED
					
					//EXIT
					boolean exit = false;
					try{
						$(byImage("${imagePath}/exit.png")).getCoordinates();
						//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
						exit = true;
						log.info("Exit Button Found");				
					}catch(Exception e){
						exit = false;
						log.info("Exit Button Not Found");
					}
					if(exit == true){
						$(byImage("${imagePath}/exit.png")).click();
						log.info("Exit");			
					}
				
				}
				
				////////////////////////////////////INDIVIDUAL/////////////////////////////////
				
				////////////////////////////////////CORPORATE/////////////////////////////////
				if(!entity_type[i].equalsIgnoreCase("I")){
				
					//ENTER ON "CORPORATE CREDIT PROFILE REPORT"
					sendKeys("{DOWN 2}");
					pressEnter();
					
					//NON-RESIDENT
					if(!presidency[i].equalsIgnoreCase("resident")){	//change accordingly
						sendKeys("{DOWN}");
					}
					
					sendKeys("{TAB}");
					
					//ENTITY TYPE
					sendKeys(entity_type[i]);
					
					//ENTITY CODE
					sendKeys("{TAB}");
					
					//REMOVE C OR P
					String temp;
					String first = "";
					if(entity_type[i].equalsIgnoreCase("c") || entity_type[i].equalsIgnoreCase("p")){
					first = String.valueOf(entity_code[i].charAt(0));
						if(first.equalsIgnoreCase("p") || first.equalsIgnoreCase("c")){
							temp = entity_code[i].substring(1,entity_code[i].length());
							entity_code[i] = temp;
						}
					
					}
					
					
					sendKeys(entity_code[i]);
					sendKeys("{TAB}")
					
					 //ENTITY CODE EXCEPT
					boolean entity_cust_corp_except = false;
						try{
							$(byImage("${imagePath}/entity_code_except.png")).getCoordinates();
							//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
							entity_cust_corp_except = true;				
						}catch(Exception e){
							entity_cust_corp_except = false;
							//log.info("nah bruuuh")
						}

						if(entity_cust_corp_except == true){
							pressEnter();
							log.info("Error: Customer not available");
							exceptEntity.add(entity_code[i]);
							except.add("Customer not available");
							billed.add("N/A");
							
							if(presidency[i].equalsIgnoreCase("resident")){
							
								//----------REMOVE COMMENTS FOR LIVE------------------
								//EXIT
								boolean entity_except_corp_exit = false;
								try{
									$(byImage("${imagePath}/exit.png")).getCoordinates();
									//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
									entity_except_corp_exit = true;
									log.info("Exit Button Found");				
								}catch(Exception e){
									entity_except_corp_exit = false;
									log.info("Exit Button Not Found");
								}
								if(entity_except_corp_exit == true){
									$(byImage("${imagePath}/exit.png")).click();
									log.info("Exit");			
								}
								sleep(2000);
								
								continue outtaloop;
							}			
 						}
					
					
					//NON-RESIDENT(CHOOSE COUNTRY)
					if(!presidency[i].equalsIgnoreCase("resident")){	//change accordingly
						boolean country_corp_bool = false;
						try{
							$(byImage("${imagePath}/country_corp.png")).getCoordinates();
							//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
							country_corp_bool = true;				
						}catch(Exception e){
							country_corp_bool = false;
							log.info("nah bruuuh")
						}
						if(country_corp_bool == true){
							$(byImage("${imagePath}/country_corp.png",100,0)).click();
							log.info("Country Textbox Selected");			
						}
						sendKeys(country[i]);	
					}
					
					//SAVE REPORTS TO DISK
					boolean save_corp_bool = false;
					try{
						$(byImage("${imagePath}/save_reports.png")).getCoordinates();
						//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
						save_corp_bool = true;				
					}catch(Exception e){
						save_corp_bool = false;
						log.info("nah bruuuh")
					}
					if(save_corp_bool == true){
						$(byImage("${imagePath}/save_reports.png")).click();
						log.info("Save Reports Selected");			
					}
					
					
					//GENERATE REPORTS
					boolean generate_corp_bool = false;
					try{
						$(byImage("${imagePath}/generate_reports_corp.png")).getCoordinates();
						log.info("jam inn")
						generate_corp_bool = true;				
					}catch(Exception e){
						generate_corp_bool = false;
						log.info("report gen click error")
					}
					if(generate_corp_bool == true){
						$(byImage("${imagePath}/generate_reports_corp.png")).click();
						log.info("Generate Reports Selected");			
					}
					
					
					//BROWSE & SAVE REPORT
					sendKeys(direstraits+entity_code[i]);
					pressEnter();
					
					
					//REPORT SAVED
					boolean file_success_corp = false;
					try{
						$(byImage("${imagePath}/success_ok.png")).getCoordinates();
						//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
						file_success_corp = true;
						log.info("File Successfully Saved");				
					}catch(Exception e){
						file_success_corp = false;
						log.info("File Not saved");
					}
					if(file_success_corp == true){
						$(byImage("${imagePath}/success_ok.png")).click();
						log.info("File Download Handled");
						entity_code_success.add(entity_code[i]);			
					}
					
					
					//REMOVE BILLED VERIFICATION
					
					//EXIT
					boolean exit_corp = false;
					try{
						$(byImage("${imagePath}/exit.png")).getCoordinates();
						//System.out.println($(byImage("${imagePath}/country.png")).getRect().getWidth());
						exit_corp = true;
						log.info("Exit Button Found");				
					}catch(Exception e){
						exit_corp = false;
						log.info("Exit Button Not Found");
					}
					if(exit_corp == true){
						$(byImage("${imagePath}/exit.png")).click();
						log.info("Exit");			
					}
					
					
				} 
		////////////////////////////////////CORPORATE/////////////////////////////////
		}
		//////////////////////////////////////LOOP////////////////////////////////////
		println("BILLED: "+billed);
		println("ENTITY: "+exceptEntity);
		println("ISSUE: "+except); 

		//////////////////////////////////////APPEND LOG//////////////////////////////////////
		File inputFile2 = null;
			try{
				//FROM
				inputFile2 = new File(inputExcelPath);
				FileInputStream fis2 = new FileInputStream(inputFile2);
				XSSFWorkbook inputWorkbook2 = new XSSFWorkbook(fis2);
				XSSFSheet inputSheet2 = inputWorkbook2.getSheetAt(0); 
								
				//TO
				outputFile2 = new File(logPath); 
				FileInputStream fisi2 = new FileInputStream(outputFile2);
				    
				XSSFWorkbook outputWorkbook2 = new XSSFWorkbook(fisi2);
				XSSFSheet outputSheet2 = outputWorkbook2.getSheetAt(0);
				
				
				int rowCount2 = inputSheet2.getLastRowNum();
				int outputRowCount2 = outputSheet2.getLastRowNum();
				log.info(rowCount2+" rows in inputsheet: "+inputSheet2.getSheetName());
				
				
			
				//FIND THE LAST WRITABLE ROW
				int lastCurrentRowIndex2 = 0;//DEAL CELL
				Iterator lastRowIterator2 = outputSheet2.iterator();
				while(lastRowIterator2.hasNext()){	
			
					Row lastCurrentRow2 = outputSheet2.getRow(lastCurrentRowIndex2);
					
					if(lastCurrentRow2 == null){
					
						lastCurrentRow2 = outputSheet2.createRow(lastCurrentRowIndex2);
						
					}
					
					int currentCellIndex2 = 1;	//SECOND COLUMN
					Cell lastCellData2 = lastCurrentRow2.getCell(currentCellIndex2,Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
					CellType lastCurrentCellType2 = lastCellData2.getCellTypeEnum();
					
					if(lastCurrentCellType2 == CellType.BLANK){//2 IS BLANK CELL TYPE
						log.info("LAST ROW IN 'LOG': "+ lastCurrentRowIndex2);
						break;
					}
					lastCurrentRowIndex2++;
				}
				
			
			    int currentRowIndex2=1;//CHANGE
			    int printRowIndex2 = lastCurrentRowIndex2;//ROW TO WRITE-->MUST PUT BEFORE OUTERLOOP(CURRENCY)				(CURRENTLY 122)
				
			
							               
				Iterator rowIterator2 = inputSheet2.iterator();

			while(rowIterator2.hasNext())
			{
				int printCellIndex2 = 0;
				//Iterator cellIterator=rowIterator.next().cellIterator();
				Row currentRow2 = inputSheet2.getRow(currentRowIndex2);
				if(currentRow2 == null){log.info("Brokeman");break;}
				
			
				
				Cell filterCheckCell2 = currentRow2.getCell(0,Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
				
				if(filterCheckCell2 != null){
					
					Row rowmiah = outputSheet2.getRow(printRowIndex2);
					if(rowmiah == null){
						rowmiah = outputSheet2.createRow(printRowIndex2);
					}
						
						String value = "";
						for(int currentCellIndex2 = 0; currentCellIndex2 < 18; currentCellIndex2++){//0-18//A-R
							Cell cellData2 = currentRow2.getCell(currentCellIndex2,Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
							DataFormatter formatter2 = new DataFormatter();
							value2 = formatter2.formatCellValue(cellData2);
			
								
								
								Cell cellmiah = rowmiah.createCell(currentCellIndex2);
								//System.out.println("current row index" + currentRowIndex2);
								//System.out.println("current cell index"+ currentCellIndex);
								if(currentCellIndex2 == 9){
									cellmiah.setCellValue(billed[currentRowIndex2-1]);
								}
								else{
									cellmiah.setCellValue(value2);
								}
								//System.out.println("row: "+printRowIndex2);
								//System.out.println("cell: "+currentCellIndex2);
								//System.out.println("FUR AUD: "+value);
	
						}
						printRowIndex2++;
						
					}
				
				currentRowIndex2++;			
			}
			FileOutputStream fos2 = new FileOutputStream(outputFile2);
			fisi2.close();
			outputWorkbook2.write(fos2);
			fos2.close();
			log.info("Successfully written to Log");
			//System.out.println((currentRowIndex-1)+" rows added to outputsheet "+outputSheet.getSheetName());
			//System.out.println();
			
			}catch(Exception e){
			log.info("Error in Log");
			e.printStackTrace();} 
			
		
		//////////////////////////////////////APPEND LOG//////////////////////////////////////
		
		
		///////////////////////////////////APPEND ISSUE LOG////////////////////////////////////
		File inputFile3 = null;
			try{
				
						
				//TO
				outputFile3 = new File(issueLogPath); 
				FileInputStream fisi3 = new FileInputStream(outputFile3);
				    
				XSSFWorkbook outputWorkbook3 = new XSSFWorkbook(fisi3);
				XSSFSheet outputSheet3 = outputWorkbook3.getSheetAt(0);
			
				//FIND THE LAST WRITABLE ROW
				int lastCurrentRowIndex3 = 0;//DEAL CELL
				Iterator lastRowIterator3 = outputSheet3.iterator();
				while(lastRowIterator3.hasNext()){	
			
					Row lastCurrentRow3 = outputSheet3.getRow(lastCurrentRowIndex3);
					
					if(lastCurrentRow3 == null){
					
						lastCurrentRow3 = outputSheet3.createRow(lastCurrentRowIndex3);
						
					}
					
					int currentCellIndex3 = 1;	//SECOND COLUMN
					Cell lastCellData3 = lastCurrentRow3.getCell(currentCellIndex3,Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
					CellType lastCurrentCellType3 = lastCellData3.getCellTypeEnum();
					
					
					if(lastCurrentCellType3 == CellType.BLANK){//3 IS BLANK CELL TYPE
						log.info("LAST ROW IN 'ISSUE LOG': "+ lastCurrentRowIndex3);
						break;
					}
					lastCurrentRowIndex3++;
				}
				
			
			    int currentRowIndex3=lastCurrentRowIndex3;//CHANGE
			    
				
			
							               
				

			for(int i = 0; i < exceptEntity.size(); i++)
			{
					Row rowmiah = outputSheet3.getRow(currentRowIndex3);
					if(rowmiah == null){
						rowmiah = outputSheet3.createRow(currentRowIndex3);
					}
						
						String value = "";
						for(int currentCellIndex3 = 0; currentCellIndex3 < 4; currentCellIndex3++){//0-18//A-R
							
								Cell cellmiah = rowmiah.getCell(currentCellIndex3);
								if(cellmiah == null){
									cellmiah = rowmiah.createCell(currentCellIndex3);
								}
								//System.out.println("current row index" + currentRowIndex3);
								//System.out.println("current cell index"+ currentCellIndex);
								if(currentCellIndex3 == 0){
									cellmiah.setCellValue(karanDate);
								}
								if(currentCellIndex3 == 1){
									cellmiah.setCellValue(exceptEntity[currentRowIndex3-1]);
								}
								if(currentCellIndex3 == 2){
									cellmiah.setCellValue(except[currentRowIndex3-1]);
								}
								//System.out.println("row: "+printRowIndex3);
								//System.out.println("cell: "+currentCellIndex3);
								//System.out.println("FUR AUD: "+value);
	
						}
						
				currentRowIndex3++;			
			}
			FileOutputStream fos3 = new FileOutputStream(outputFile3);
			fisi3.close();
			outputWorkbook3.write(fos3);
			fos3.close();
			log.info("Successfully written to Issue Log");
			//System.out.println((currentRowIndex-1)+" rows added to outputsheet "+outputSheet.getSheetName());
			//System.out.println();
			
			}catch(Exception e){
			log.info("Error in Issue Log");
			e.printStackTrace();} 
			
		
		///////////////////////////////////APPEND ISSUE LOG////////////////////////////////////
		
		
		 
		
		//////////////////////////////////////REPLY MAIL///////////////////////////////////////
		
		switchToExistingWindow(new WindowDescriptor("", "(?i).*\\Q"+mail_subject_essential_oils+"\\E.*", false, true).toString(), 10000);
			sendKeys('^r');
			//sendKeys('{CTRLUP}r{CTRLDOWN}');
			
			for(int i = 0; i < entity_code_success.size(); i++){
			
				switchToExistingWindow(new WindowDescriptor("", "(?i).*\\QRE: "+mail_subject_essential_oils+"\\E.*", false, true).toString(), 10000);			
				sleep(1000);
				sendKeys('!n');
				//sendKeys('{ALTUP}n{ALTDOWN}')
				sendKeys('af')
			
				//UPLOAD FILES
				switchTo().window('[CLASS:#32770;TITLE:Insert File]');
				sendKeys(Dir+currdt_folder+"\\"+entity_code_success[i]+".pdf");
				$('[CLASS:Button;NAME:Insert]').click();
			}
			switchToExistingWindow(new WindowDescriptor("", "(?i).*\\QRE: "+mail_subject_essential_oils+"\\E.*", false, true).toString(), 10000);
			$('[CLASS:Button;NAME:Send]').click();
			
			//////////////////////////////////////REPLY MAIL///////////////////////////////////////
			
			
]]></script>

</robot>
</robotics-flow>

<robotics-flow>
<robot driver="desktop" start-in-private="false">	
		<script><![CDATA[	
		
	
		
		]]></script>

</robot>
</robotics-flow>
		
		
    <export include-original-data="true"></export>

</config>

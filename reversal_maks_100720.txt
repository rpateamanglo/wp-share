<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config" scriptlang="groovy">

<var-def name="links">
	<datastore name="ceb_billing">
		SELECT * FROM @this
	</datastore>
</var-def> 

<var-def name="ph">
		<datastore name="public_holidays">
			SELECT * from @this
		</datastore>
</var-def>

<secrets-vault-get alias="makola_capture_officer" />
<secrets-vault-get alias="makola_supervisor_officer" />
<secrets-vault-get alias="ebox_portal" />
		
<robotics-flow>
<robot driver="universal" name="driver" start-in-private="false" close-on-completion="true">
			<capability name ="SEARCH_ALL_WINDOWS" value="true"/>
			<capability name="CLOSE_ALL_WINDOWS" value="false"/>
		<script><![CDATA[
			
			//added read from mail-vbs 08/07/20
			//added loop in mail script 08/07/20
			//added read .new file and put id and amount in hash 09/07/20
			//added parseCsv and put id and amount in hash 09/07/20
			//added download report on ebox 09/07/20
			//will get null in details_map_mail if .new file not correct 09/07/20
			//compare mail text file and payment excel 10/07/20
			//not getting file after download 13/07/20
			//test default download path-->delete payment file after execution
			//move error file to daily folder after exe
			//download wait time fixed->try dyna
			//add date filter to Payment file line 174
			//add log
			//date in payment file is in DD MM YYYY format--> test if date format changes
			//error while choosing bill payment makola line 325
			//put pageLoadTimeout while clicking on submit for auth makola maker
			
			
			//date
			import java.time.LocalDate;
			import java.time.LocalDateTime;
			import java.time.ZoneId;
			import java.time.format.DateTimeFormatter
			import java.util.*;
			import java.text.SimpleDateFormat;			
			//read text
			import java.io.File;  
			import java.io.FileNotFoundException; 
			import java.util.Scanner;
			import java.util.*;			
			//read csv
			import org.apache.commons.csv.CSVFormat;
			import org.apache.commons.csv.CSVParser;
			import org.apache.commons.csv.CSVRecord;
			import java.io.IOException;
			import java.io.Reader;
			import java.nio.file.Files;
			import java.nio.file.Paths;
			
			import java.util.HashMap;
			
			//date
			LocalDate karanLocal    = LocalDate.parse("2020-06-23"); 							//test for current date
			//LocalDate karanLocal    = LocalDate.now()												//live
			LocalDateTime kLDT 		= LocalDateTime.now(ZoneId.of("GMT+04:00"));				//zone timed live					
			LocalDate oneDayBefore  = karanLocal.minusDays(1); 									//one day before
			LocalDate pwd		    = karanLocal.minusDays(1);									//previous working day is one day before by default
			LocalDate reversalTo    = pwd.plusDays(1);											//from which date to take reversals
			LocalDate creditDate	= oneDayBefore;

			DateTimeFormatter paymentFileDateFormat = DateTimeFormatter.ofPattern("dd MMM yyyy");
			DateTimeFormatter csvDateFormat   = DateTimeFormatter.ofPattern("M/d/yyyy");
			
			//paths
			String path = "C:\\Users\\RB-Eform01\\Desktop\\2020\\07 July\\09.07.20\\";
			String download_path = "C:\\Users\\RB-Eform01\\Downloads\\"
			//String ebox_portal = "https://eboxprdcsc.corebanking.intra.absa.co.za/csc/login.jsp"; //live
			String ebox_portal = "https://eboxuatcsc.corebanking.intra.absa.co.za/csc/login.jsp"; //uat
			String ceb_acc = "3000361";
			String payment_file_path = download_path + "Payment.csv"
			String open_folder_path = "C:\\rpaScriptsBackup\\ceb_backup_030720\\config\\Open\\";
			
			//ds
			String acc_number = "3000361";
			String makola_portal = "https://secure-payments-portal-sso-payments-portal-dev.apps.nonprod.ocp.absa.co.za/auth/realms/payments-portal/protocol/openid-connect/auth?client_id=payment-portal-frontend&redirect_uri=https%3A%2F%2Fpayments-celine-uat.apps.nonprod.ocp.absa.co.za%2F%23%2F&state=5b646cc2-0ef8-4ca1-8ec2-84f4fba206e4&response_mode=fragment&response_type=code&scope=openid&nonce=759fe865-b9e4-43e9-8c96-32680c2e1f14";

			//SECRETS VAULT
			Map entryMap = secureEntryMap.getWrappedObject();
			com.freedomoss.crowdcontrol.webharvest.web.dto.SecureEntryDTO obj = entryMap.get("makola_capture_officer");
			com.freedomoss.crowdcontrol.webharvest.web.dto.SecureEntryDTO obj2 = entryMap.get("makola_supervisor_officer");
			com.freedomoss.crowdcontrol.webharvest.web.dto.SecureEntryDTO obj3 = entryMap.get("ebox_portal");
			username1 = obj.getKey().toString();
			password1 = obj.getValue().toString();
			username2 = obj2.getKey().toString();
			password2 = obj2.getValue().toString();
			username3 = obj3.getKey().toString();
			password3 = obj3.getValue().toString();
			
			//COMPARE HASHMAPS
			HashMap<Double,Double> details_map_mail = new HashMap<Double,Double>();
			HashMap<Double,Double> details_map_ebox = new HashMap<Double,Double>();
			
			//REVERSAL AMOUNT
			Double debit_reversal = 0.0;
			Double credit_reversal;
			
			
			//LIST OF PUB_HO
			List dateList = new ArrayList();
			for(int i = 0; i < ph.size(); i++){
				date = ph.get(i).getAt("Date").toString();	
				dateList.add(date);
			}
			
			
			//PREVIOUS WORKING DAY
			boolean validPwd = false;
			while(!validPwd){
				
				String pwdCheck = pwd.format(csvDateFormat);
					 
				//PREVIOUS WORKING IS A NON-SUNDAY PUBLIC HOLIDAY
				if(dateList.contains(pwdCheck) && pwd.getDayOfWeek().toString() != "SUNDAY"){
					pwd = pwd.minusDays(1);

				}
				//THE WEEKND
				else if(pwd.getDayOfWeek().toString() == "SUNDAY"){
					//SUNDAY
					if(pwd.getDayOfWeek().toString() == "SUNDAY"){
						pwd = pwd.minusDays(1);
					}
					
					//SATURDAY
					if(pwd.getDayOfWeek().toString() == "SATURDAY"){
						pwd = pwd.minusDays(1);
					}
				}
				//ALL OTHER SCENARIOS(NORMAL WORKING DAY)
				else{
					validPwd = true;
				}
			}
			log.info("Current Day: "+karanLocal);
			//PWD CHANGES 
			reversalTo  = pwd.plusDays(1);
			log.info("Previous Working Day: "+pwd);
				
			
			//PROCESS TEXT FILES
			File open_folder = new File(open_folder_path);
			File[] filesList = open_folder.listFiles();
			for(File file : filesList){
				if(file.getName().contains("ABSA_ERR")){
					Scanner myReader = new Scanner(file);
					String header = myReader.nextLine();
					String[] header_parts = header.split("\\|");
					 
					ArrayList details_temp = new ArrayList();
					String temp = "";
					int num_trans = Integer.parseInt(header_parts[6]);
					while(myReader.hasNextLine() && myReader != null){
						temp = myReader.nextLine();
						Double id_double;
						Double amt_double;
						//Process details
						if(temp != null || temp != ""){
							details_temp = temp.split("\\|");

							if(details_temp[1] != null){
								id_double = Double.parseDouble(details_temp[1]);
							}
							if(details_temp[4] != null){
								amt_double = Double.parseDouble(details_temp[4]);
							}

							details_map_mail.put(id_double,amt_double);
							
						}
					}
					 myReader.close();
					 
				}
			}
			println(details_map_mail);
			
			 
		 	//////////////////////////////////////////////////EBOX/////////////////////////////////////////////////////////////
			openChrome(ebox_portal);
			pageLoadTimeout(100000);
			$(byXpath("//input[@name='username']")).sendKeys(username3);
			$(byXpath("//input[@name='j_password']")).sendKeys(password3);
			//$(byText("corp.dsarena.com")).click();//domain
			pageLoadTimeout(30000);
			$(byXpath("/html/body/div[2]/form/div[2]/input")).click();//login
			
			//STATEMENT VIEW
			boolean ebox_load = false;
			try{
			ebox_load = $(byText("Transaction Search")).is(VISIBLE);
			}catch(Exception e){
				refresh();
				pageLoadTimeout(100000);
				$(byText("Transaction Search")).click();
			}
			
			if(ebox_load){
				$(byText("Transaction Search")).click();
			}
			
			//search criteria-->general
			$(byText('Counterparty')).click();
			sleep(3000);
			$(byXpath('//*[@id="counterparty"]/form/table/tbody/tr[4]/td[2]/input')).sendKeys(ceb_acc); //acc number
			$(byXpath('//*[@id="counterparty"]/form/div[1]/input')).click(); //search
			$(byXpath('/html/body/div[3]/div[2]/form[2]/input')).click()//export-->goes to Downloads by default
			sleep(10000);
			//downloadFileOnAgent('https://eboxprdcsc.corebanking.intra.absa.co.za/csc/secure/eChannel/exportSearchPayment.do?',path+"payment.csv");
	 		
			//////////////////////////////////////////////////EBOX/////////////////////////////////////////////////////////////
			 
			//READ PAYMENT CSV
			File payment_file = new File(payment_file_path);
			//ArrayList to store details of branch, account and amount
			ArrayList id_arr = new ArrayList();
			ArrayList originator_branch_arr = new ArrayList();
			ArrayList originator_account_arr = new ArrayList();
			ArrayList originator_amount_arr = new ArrayList();
			int credit_count; //number of creditors to reverse
			if(payment_file.exists()){
				Reader reader = Files.newBufferedReader(Paths.get(payment_file_path));
				CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT);
				reader.readLine();//read header
				int count = 0;
				LocalDate transDate;
				for (CSVRecord csvRecord : csvParser) {

					// Accessing Values by Column Index
					String transDateStr = csvRecord.get(4); //PostDate
					String id = csvRecord.get(74); //TrxId
					String originator_branch = csvRecord.get(12); //OriginatorBranchId
					String originator_account = csvRecord.get(14); //OriginatorAccountNumber
					String originator_amount = csvRecord.get(16); //OriginatorTransactionAmount

					//add details to arraylist-->if one record is blank or null it would cause problem
					if(originator_branch.length() == 1){
						originator_branch = "0"+originator_branch;
					}
					if(originator_branch.length() == 2){
						originator_branch = "0"+originator_branch;
					}
					
					//date filter--->from reversalTo to current day
					transDate = LocalDate.parse(transDateStr,paymentFileDateFormat); 
					if(transDate >= reversalTo && transDate <= karanLocal){
	
						originator_branch_arr.add(originator_branch);
						originator_account_arr.add(originator_account);
						id_arr.add(id);
						
						credit_count++;
						//add TrxId and amount to map
						if(id != null || id != ""){
							if(originator_amount != null || originator_amount != ""){
								Double id_double = Double.parseDouble(id);
								Double amt_double = Double.parseDouble(originator_amount);
								details_map_ebox.put(id_double,amt_double);
								originator_amount_arr.add(amt_double);
							}
						}
					
					}
					
				}
				csvParser.close();
				reader.close();
			}
			println(details_map_ebox);
			
			//COMPARE
			if(details_map_mail.equals(details_map_ebox)){
				//MATCHED
				log.info("Transactions from eBox matched with error file(s)");
				//assign debit amount-->sum of credit
				for (Double d : details_map_mail.values()) {
					debit_reversal += d;
				}
			}
			println(debit_reversal);
			println(originator_branch_arr)
			println(originator_account_arr)
			println(originator_amount_arr)
			println(id_arr);
			
			 
	 		/////////////////////////////////////////////////MAKOLA/////////////////////////////////////////////////////////////
			boolean login_capture_pass = true;
			boolean login_verfiy_pass  = true;
				
			for (int c = 0; c < 2; c++){
				//LOGIN
				pageLoadTimeout(100000);
				openChrome(makola_portal);
				$(byXpath("//*[@id='username']")).sendKeys(username1);
				$(byXpath("//*[@id='password']")).sendKeys(password1);
				pageLoadTimeout(100000);
				$(byXpath("//*[@id='kc-login']")).click();
					
				sleep(10000);
					
				try{
					login_capture_pass = $(byXpath("//*[@id='payment-capture']")).is(EXIST);
				}catch(Exception e){
					login_capture_pass = false;
				}
				if(login_capture_pass){break;}
					
			}
			
			if(!login_capture_pass){
				log.info("Payment Officer Login failed twice. Stopping transaction");
				//loginta.append(karanLocal.toString());
				//loginta.newLine();
				//loginta.append("Payment Officer Login failed twice. Stopping transaction");
				//loginta.newLine();
			}
			
			
			/////////////////////////////////LOGIN SUCCESS//////////////////////////////
			if(login_capture_pass){
			////////////////////////////////////////////////////////////////////////////
			//PAYMENT CAPTURE
			try{
				pageLoadTimeout(10000);
				$(byXpath("//*[@id='payment-capture']")).click();
			}catch(Exception e){
				log.info("10s Wait")
				sleep(10000);
				$(byXpath("//*[@id='payment-capture']")).click();
			}
			
			n = 0;
			
			////
			HashMap<Integer,Double> verify_match_map = new HashMap<String,String>();
			for(int i = 0; i < originator_account_arr.size(); i++){
			////	
				log.info("Transaction id: " + id_arr[i]);
				//loginta.append("Transaction id: " + id_arr[i]);
				//loginta.newLine();
				//loginta.newLine();
				
				////DEBIT
				sleep(5000);
				$(byXpath("//*[@id='undefined']")).sendKeys("037");							//branch(hc)
				//$(byXpath("//*[@id='undefined']")).sendKeys(branch);						//branch
				$(byXpath("//*[@id='accountNumber']")).sendKeys(acc_number);				//account number
				sendKeys(Keys.TAB);
				sleep(3000);
				
				//AVAILABLE BALANCE-->ADDED 240420-->appears only if account is valid 
				//html/body/app-root/div/div/div/payment-capture/div/div/form[1]/div/div[1]/div/div/div[1]/span/h5[1]
				String available_bal_str = $(byXpath("/html/body/app-root/div/div/div/payment-capture/div/div/form[1]/div/div[1]/div/div/div[1]/span/h5[1]/b")).text();
				log.info("Available Balance: "+available_bal_str);
				//loginta.append("Available Balance: ");
				//loginta.append(available_bal_str);		
				//loginta.newLine();
				
				//Origination reference
				$(byXpath("//*[@id='instructionOriginationReference']")).sendKeys(id_arr[i]);
				//Destination reference
				//$(byXpath("//*[@id='destinationReference']")).sendKeys("Suspense");
				//workflow reference
				$(byXpath("//*[@id='workflowReference']")).sendKeys(id_arr[i]);
					
				//purpose of payment
				if($(byXpath("//*[@id='paymentPurpose_customselect']")).is(PRESENT)){	
					$(byXpath("/html/body/app-root/div/div/div/payment-capture/div/div/form[1]/div/div[2]/div[2]/div[1]/div/div/sol-custom-select/div/div")).click();
					$(byText("Bill Payment")).click();
				}
				log.info("Debit Entry Done");
				//loginta.append("Debit entry has been successfully been entered into the system.");			
				//loginta.newLine();
				
				int n = 0;
				////CREDIT
				$(byXpath("//*[@id='bankCode"+n+"']")).sendKeys("03"); 									//bank code
				$(byXpath("//*[@id='branchId"+n+"']")).sendKeys(originator_branch_arr[i]);				//branch
				$(byXpath("//*[@id='accountNumber"+n+"']")).sendKeys(originator_account_arr[i]);		//account number
				
				//origination ref 
				try{
				$(byXpath("//*[@id='originationReference"+n+"']")).sendKeys(id_arr[i]);
				log.info("Filling Origination Reference");
				}catch(Exception e){}
				
				//destination ref 
				def dest_ref = $(byXpath("//*[@id='destinationReference"+n+"']"));
				if(dest_ref.val() == ""){
					dest_ref.sendKeys(id_arr[i]);
				}
				
				//amount
				try{
				$(byXpath("//*[@id='amount"+n+"']")).sendKeys(String.format("%.2f",originator_amount_arr[i])); 
				}catch(Exception e){log.info("Amount Error "+e)}
				
				n++;
				
				
			
				//}
				log.info("Credit Entries Done");
				//loginta.append("Credit entry has been successfully been entered into the system.");			
				//loginta.newLine();
				
				//review
				def review = $(byXpath("/html/body/app-root/div/div/div/payment-capture/sol-footer/div/div/span[3]/footer-primary/button")).is(ENABLED);
				
				//test-ing
				//def review = $(byText("Clear All")).is(EXIST);
				
				if(review){
					
					//test-ing
					$(byText("Clear All")).click();
					$(byText("Yes")).click();
					
					//review button
					//$(byXpath("/html/body/app-root/div/div/div/payment-capture/sol-footer/div/div/span[3]/footer-primary/button")).click();	
					//submit button
					//sleep(3000);
					//$(byXpath("/html/body/app-root/div/div/div/payment-review/sol-footer/div/div/span[3]/footer-primary/button")).waitUntil(VISIBLE);
						
					//try{
					//$(byXpath("/html/body/app-root/div/div/div/payment-review/sol-footer/div/div/span[3]/footer-primary/button")).click();
					//$(byText("Submit for authorisation")).click();
					//log.info("Submitted for Authorisation");
					//}catch(Exception e){}
					//loginta.append("Transaction Successfully Reviewed and Submitted. Waiting for Confirmation of Supervisor")
					//loginta.newLine(); 
					
					verify_match_map.put(Double.parseDouble(id_arr[i]),true);
				}
				else{
					
					//test-ing
					$(byText("Clear All")).click();
					$(byText("Yes")).click();
					
					//loginta.append("Balance Matched but Cannot Review Transaction. Something Wrong");
					//loginta.newLine();	
					//review_error = true;
					log.info("Balance Matched but Cannot Review Transaction. Something Wrong"); 
						
					verify_match_map.put(Double.parseDouble(id_arr[i]),false);
				}
				
			////
			}
			////
			println(verify_match_map)
			/////////////////////////////////LOGIN SUCCESS//////////////////////////////
			}
			////////////////////////////////////////////////////////////////////////////
			
			
			/////////////////////////////////////////////////MAKOLA/////////////////////////////////////////////////////////////
			
			
		]]></script>
	
	</robot>
</robotics-flow>
		
<export include-original-data="true"></export>

</config>
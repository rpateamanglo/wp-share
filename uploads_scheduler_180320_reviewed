<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config" scriptlang="groovy">


<secrets-vault-get alias="portal" />
<secrets-vault-get alias="teradata" />

<var-def name="links">
	<datastore name="mcib_uploads">
		SELECT * FROM @this
	</datastore>
</var-def> 

<var-def name="teradata_loc">
       <template>C:\Program Files (x86)\Teradata\Client\14.00\Teradata SQL Assistant\startup.exe</template>
</var-def>

<var-def name="mcib_path">
       <template>V:\ABSA\Customer\Year 2020\Z Codes Backup\mcib_bot\MCIB\Uploads\</template>
</var-def>

<var-def name="MCIB_webPortal">
       <template>http://muubhemapp0006.corp.dsarena.com:8090/mcib/</template>
</var-def>




	<robotics-flow>
		<robot driver="universal" close-on-completion="false"
			start-in-private="false">
			<capability name="SEARCH_ALL_WINDOWS" value="true" />
			<capability name="CLOSE_ALL_WINDOWS" value="false" />
			<script><![CDATA[
			
			
			import java.nio.file.Files
			import org.apache.commons.io.FileUtils;
			import java.io.File;
			import java.io.FileInputStream;
			import java.io.FileOutputStream;
			import java.io.BufferedReader;
			import java.io.InputStream;
			import java.io.InputStreamReader;
			import java.io.OutputStreamWriter;
			import java.io.Writer;
			import java.io.BufferedWriter;
			import java.io.*;
			import java.util.Scanner;
			import java.time.LocalDate;
			import java.time.format.DateTimeFormatter;
			import java.time.DayOfWeek;
			import java.text.SimpleDateFormat;
			import java.lang.*;
			
			import java.nio.file.FileSystem;
			import java.nio.file.FileSystems;
			import java.nio.file.Files;
			import java.nio.file.Path;
			import java.nio.file.StandardCopyOption;
			
			import com.workfusion.studio.rpa.recorder.api.*
			import com.workfusion.studio.rpa.recorder.api.types.*
			import com.workfusion.studio.rpa.recorder.api.custom.*
			import com.workfusion.studio.rpa.recorder.api.internal.representation.*
			import com.workfusion.bot.exception.*
			
			////DATASTORE
			//DIRECTORY
			String Dir = links.get(0).getAt("path").toString();
			//EBOX PORTAL
			String teradata_loc = links.get(0).getAt("teradata_loc").toString();
			//MAKOLA PORTAL
			String MCIB_webPortal = links.get(0).getAt("MCIB_webPortal").toString();
				
			//SECRET VAULT
			Map entryMap = secureEntryMap.getWrappedObject();
            com.freedomoss.crowdcontrol.webharvest.web.dto.SecureEntryDTO obj = entryMap.get("portal");
            com.freedomoss.crowdcontrol.webharvest.web.dto.SecureEntryDTO obj2 = entryMap.get("teradata");
            portal_user = obj.getKey();
            portal_pwd = obj.getValue();
            teradata_user = obj2.getKey();
            teradata_pass = obj2.getValue();
			
         	
         	Boolean triphase_except = false;
         	Boolean overdraft_arrears_except  = false;
         	Boolean credit_arrears_except = false;
         	Boolean row_match_except = false;
         	Boolean date_check_except = false;
         	
			List<String> fname = new ArrayList<String>();
			List<String> row_num_list = new ArrayList<String>();	
			boolean processing_finish = false;
			String rodolfo = "";
			HashMap numRows = new HashMap();
			int row_num;
			
			Date datos = new Date();
			String currdt_folder = new SimpleDateFormat("dd.MM.yyyy").format(datos);
			String currmonth_folder = new SimpleDateFormat("M MMMM").format(datos);
			
			//localDate
			LocalDate date = LocalDate.now();
			DateTimeFormatter formata = DateTimeFormatter.ofPattern("dd/MM/yyyy");
						
			////////////////////////////////////////////////////CHECK FOR FILES///////////////////////////////////////////////////////////
			
			//BROWSE FOR SQL FILES
			List<String> results = new ArrayList<String>();
      		File[] files = new File(Dir+"sql_files").listFiles();      
			String num_of_files = new File(Dir+"sql_files").listFiles().length;
			int count = 0;
        	for (File file : files){
				if(file.isFile()){
						results.add(file.getName());
						count++;	
				}
			}
           log.info("SQL Files : "+results);
		   log.info("Numburr of sql files: "+count);
 	
			
			//MONTHLY FOLDER
			File monthlyFolder = new File(Dir+currmonth_folder);
            if(!monthlyFolder.exists()){
            	monthlyFolder.mkdir();
            }
			
			//DAILY FOLDER
			File dailyFolder = new File(Dir+currmonth_folder+"//"+currdt_folder);
            if(!dailyFolder.exists()){
            	dailyFolder.mkdir();
            }
            
            
            //LOG FOLDER
            File logFolder = new File(Dir+currmonth_folder+"//"+currdt_folder+"//LOG");
            if(!logFolder.exists()){
            	logFolder.mkdir();
            }
            
            File logFile = new File(Dir+currmonth_folder+"//"+currdt_folder+"//LOG//log.txt");
            FileOutputStream fos = new FileOutputStream(logFile);
            OutputStreamWriter osw = new OutputStreamWriter(fos);    
            Writer logWriter = new BufferedWriter(osw);
                     
            ////////////////////////////////////////////////////CHECK FOR FILES///////////////////////////////////////////////////////////
			
		 	
		 	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////TERADATA////////////////////////////////////////////////////////////
			
			openAndFocus(teradata_loc, 10000, 300);
		
			
			switchToExistingWindow(new WindowDescriptor("", "(?i).*\\QTeradata SQL Assistant\\E.*", false, true).toString(), 10000);
			
			switchTo().window('[CLASS:WindowsForms10.Window.8.app.0.33c0d9d;TITLE:Teradata SQL Assistant]');
			
			//CONNECT TO DATABASE
			$('[CLASS:Button;NAME:Connect ...]').click();
			switchTo().window('[CLASS:WindowsForms10.Window.8.app.0.33c0d9d;TITLE:Connection Information]');
			//user
			$('[CLASS:WindowsForms10.Window.8.app.0.33c0d9d;NAME:txtUser]').sendKeys(teradata_user.toString());
			sendKeys('{TAB}');
			//pass
			sendKeys(teradata_pass.toString());
			$('[CLASS:WindowsForms10.Window.8.app.0.33c0d9d;NAME:OKBtn]').click();
			
			switchTo().window('[CLASS:WindowsForms10.Window.8.app.0.33c0d9d;TITLE:Teradata SQL Assistant]');
			
			//EXPORT RESULTS
			$('[CLASS:MenuItem;NAME:File]').click();
			sendKeys('{e}')
			 
			////////////////////////////////////////////////////////SQL FILES LOOP//////////////////////////////////////////////////////////
			for(int i = 0; i < results.size(); i++){		
					
				processing_finish = false;		
				sendKeys('^o');//control o
				switchTo().window('[CLASS:#32770;TITLE:Open Query]');
				setClipboardText(Dir+"sql_files\\"+results[i]);	//path to upload
				pressCtrlV();
				pressEnter();
				switchToExistingWindow(new WindowDescriptor("", "(?i).*\\QTeradata SQL Assistant\\E.*", false, true).toString(), 10000);
				sendKeys('{F5}');
				//sendKeys(Keys.F5);
				switchTo().window('[CLASS:#32770;TITLE:Export File]');
				
				fname = results[i].split("\\.");
				results[i] = fname[0];
				setClipboardText(Dir+currmonth_folder+"\\"+currdt_folder+"\\"+results[i]);	//path to download
				pressCtrlV();
				$('[CLASS:Button;NAME:Save]').click();
				
				//STATUS OF PROCESS
				switchTo().window('[class="WindowsForms10.Window.8.app.0.33c0d9d"][title="Teradata SQL Assistant (EMDW)"]');//hardcoded
				//switchToExistingWindow(new WindowDescriptor("", "(?i).*\\QTeradata SQL Assistant\\E.*", false, true).toString(), 10000);	
				while(!processing_finish){
					sleep(10000);
					rodolfo = $('[CLASS:TextBlock]').text();
					if(rodolfo.contains("completed")){
						processing_finish = true;
					}
					else if(rodolfo.contains("aborted")){break;}
					else if(rodolfo.contains("Error")){break;}
				}
				
				//get number of rows processed
				if(processing_finish){
					row_num_list = rodolfo.split(" ");
					row_num = Integer.parseInt(row_num_list[2]);
					numRows.put(results[i],row_num);
				}
			
			/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			}
			////////////////////////////////////////////////////////SQL FILES LOOP//////////////////////////////////////////////////////////
			//print number of rows
			println(numRows);
			
			//////////////////////////////////////////////////////////TERADATA//////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			 
			///////////////////////////////////////////////////CHECK FOR FILES AND DATE///////////////////////////////////////////////////////////
			
			LocalDate prev_work_day = date.minusDays(1);
			String date_check = "";
						
			//BROWSE FOR TXT FILES
			List<String> export = new ArrayList<String>();
      		File[] export_files = new File(Dir+currmonth_folder+"\\"+currdt_folder).listFiles();      
			
			int count_export = 0;
        	for (File file : export_files){
				if(file.isFile()){
						export.add(file.getName());
						count_export++;	
				}
				//DATE FORMAT AND DATE CHECK
				//OVERDRAFT
				if(file.getName().contains("Overdraft") || file.getName().contains("Overdrafts")){
					Scanner sc = new Scanner(file);
					
					//SETTING LAST WORKING TO FRIDAY
					if(date.getDayOfWeek() == DayOfWeek.MONDAY){
						prev_work_day = date.minusDays(3);
					
					}
					date_check = prev_work_day.format(formata);
					
					sc.nextLine();
					if(sc.nextLine().contains(date_check)){
						log.info("Date Format for "+file.getName()+" CORRECT");
					}
					else{
						log.info("Date Format for "+file.getName()+" INCORRECT");
						date_check_except = true;
						//break;	removed 17/04/20 so as it check for all files 
						//add to log
					}
				}
				//CREDIT CARDS
				if(file.getName().contains("Credit cards")){
					Scanner sc = new Scanner(file);
					
					//SETTING LAST WORKING TO SATURDAY
					if(date.getDayOfWeek() == DayOfWeek.MONDAY){
						prev_work_day = date.minusDays(2);
					
					}
					date_check = prev_work_day.format(formata);
					sc.nextLine();
					if(sc.nextLine().contains(date_check)){
						log.info("Date Format for "+file.getName()+" CORRECT");
						 
					}
					else{
						log.info("Date Format for "+file.getName()+" INCORRECT");
						date_check_except = true;
						//add to log
						//break;	
					}
				}
				
				
			}
			Collections.sort(export);
           	log.info("Output Files : "+export);
		 	log.info("Numburr of txt files: "+count_export);
		   
			///////////////////////////////////////////////////CHECK FOR FILES AND DATE///////////////////////////////////////////////////////////		   
			
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////PORTAL////////////////////////////////////////////////////////////
			if(!date_check_except){
			if(count_export == 5){
			///////////////////////////////////LOGIN////////////////////////////////////
			pageLoadTimeout(150000);
			openChrome(MCIB_webPortal);
			$(byXpath('//input[@name="username"]')).sendKeys(portal_user);
			$(byXpath('//input[@name="password"]')).sendKeys(portal_pwd);
			$(byXpath('//button[@class="btn btn-primary pull-right"]')).click();
			sleep(1000);

			/////////////////////////////////////LOGIN////////////////////////////////////
			
			//////////////////////////////PROCESSED ROWS CHECK////////////////////////////
			List process = new ArrayList();
			process.add("?overdraftloan/process");
			process.add("?creditcards/process");
			process.add("?overdraftnolimit/process");
			
			for(int i = 0; i < process.size(); i++){
				pageLoadTimeout(150000);
				openChrome(MCIB_webPortal+process[i]);//---portal
				try{
				$(byText("Delete all unprocessed rows")).click();
				}catch(Exception e){}
			}
			
			//////////////////////////////PROCESSED ROWS CHECK////////////////////////////
		
			
		    ////////////////////////////OVERDRAFT WITH NO LIMIT/////////////////////////
		    try{
		    ////
			if(export[0] != null){
			if(export[0].contains("expired limits")){
			///////////////////////////////////////////////////////////////////////////
			
			log.info("----Overdraft with no limit----");
			
			//UPLOAD
			pageLoadTimeout(150000);
			openChrome(MCIB_webPortal+"?upload");//---portal
						
			//choose file
			$$(byXpath("//*[@id='datafile']")).get(2).click();
			switchTo().window('[CLASS:#32770;TITLE:Open]');
			setClipboardText(Dir+currmonth_folder+"\\"+currdt_folder+"\\"+export[0]);//------path
			pressCtrlV();
			$('[CLASS:Button;NAME:Open]').click();
			
			//upload button
			pageLoadTimeout(500000);
			$(byValue("Upload OVD No Limit")).click();
	
			
			Boolean text_present = false;
			String color = "";
			
			fluentWait().until(ExpectedConditions.presenceOfElementLocated(byXpath("/html/body/div[3]/div[2]/div/div[1]/div/div/span")));
			
			color =  $(byXpath("/html/body/div[3]/div[2]/div/div[1]/div/div/span")).getText();
		
			
			
			//upload success
			if(color.contains("Import completed")){
				
				
				log.info("Import Completed");
				
				//EXTRACT NUMBER OF ROWS--->moved from outside if condition to here 17/04/20--> do for all
				String advanced_color = color.trim();
				String[] spring = advanced_color.split("\\.");
				second_phrase = spring[1];
				String second_phrase_evolution = second_phrase.trim();
				String[] rez = second_phrase_evolution.split(" ");
				String overdraft_rows = rez[0];
			
				log.info("No of rows uploaded---"+ overdraft_rows);
				
				//PROCESS
				pageLoadTimeout(240000);
				openChrome(MCIB_webPortal+"?overdraftnolimit/process");//---portal
								
				String color_process = $(byXpath("/html/body/div[3]/div[2]/div/form/div[1]/div/label")).getText();
				String[] spring_process = color_process.split(" ");
				String overdraft_process_rows = spring_process[0];
				
				log.info("No of rows to be processed--"+ overdraft_process_rows);
				
				//compare uploaded and to be processed
				if(Integer.parseInt(overdraft_rows) == Integer.parseInt(overdraft_process_rows)){
					log.info("Number of rows imported and number of rows to be processed MATCHED")	
				
					//process button
					pageLoadTimeout(500000);
					$(byXpath("//button[@name='process']")).click();
					
					fluentWait().until(ExpectedConditions.presenceOfElementLocated(byXpath("/html/body/div[3]/div[2]/div/div/div/div")));
	
					String color_post_process = $(byXpath("/html/body/div[3]/div[2]/div/div/div/div")).getText();
					//log here
						
					//CLOSE
					pageLoadTimeout(240000);
					openChrome(MCIB_webPortal+"?overdraftnolimit/close");//---portal
								
					String color_close = $(byXpath("/html/body/div[3]/div[2]/div/form/div[1]/div/label")).getText();
					
					Boolean close_check = false;
					try{
						close_check = byText("Close products").is(EXIST);
					}catch(Exception e){
						close_check = false;
					}
					
					if(close_check){
						byText("Close products").click();
						log.info("Products Closed");
					}
				}
				else{
					log.info("Number of rows imported and number of rows to be processed NOT MATCHED");
					overdraft_arrears_except = true;
				}
				
			}
			else{
				log.info("Import of file not successful");
				//add into log and for the rest
			}
			////////////////////////////////////////////////////////////////////////////
			}
			}
			///
			}catch(Exception e){
				overdraft_arrears_except = true;
			
			}
			////////////////////////////OVERDRAFT WITH NO LIMIT/////////////////////////
			
						
			
			//////////////////////////////LOANS AND OVERDRAFT///////////////////////////
			try{
			////
			if(export[1] != null){
			if(export[1].contains("Loans")){
			if(!overdraft_arrears_except){
			///////////////////////////////////////////////////////////////////////////
			
			log.info("----Loans and overdraft-------");
			
			//UPLOAD
			pageLoadTimeout(150000);
			openChrome(MCIB_webPortal+"?upload");//---portal
			
			//choose file
			$$(byXpath("//*[@id='datafile']")).get(0).click();
			switchTo().window('[CLASS:#32770;TITLE:Open]');
			
			setClipboardText(Dir+currmonth_folder+"\\"+currdt_folder+"\\"+export[1]);//-------path
			pressCtrlV();
			$('[CLASS:Button;NAME:Open]').click();
			
			//upload button
			pageLoadTimeout(500000);
			$(byValue("Upload LOVD")).click();
			
			Boolean text_present = false;
			String color = "";
			fluentWait().until(ExpectedConditions.presenceOfElementLocated(byXpath("/html/body/div[3]/div[2]/div/div[1]/div/div/span")));
			
			color =  $(byXpath("/html/body/div[3]/div[2]/div/div[1]/div/div/span")).getText();
						
			
			
			log.info("No of rows uploaded---"+ overdraft_rows);
			
			//upload success
			if(color.contains("Import completed")){
				
				log.info("Import Completed");
				
				
				String advanced_color = color.trim();
				String[] spring = advanced_color.split("\\.");
				second_phrase = spring[1];
				String second_phrase_evolution = second_phrase.trim();
				String[] rez = second_phrase_evolution.split(" ");
				String overdraft_rows = rez[0]
				
				//PROCESS
				pageLoadTimeout(240000);
				openChrome(MCIB_webPortal+"?overdraftloan/process");//---portal
				
				String color_process = $(byXpath("/html/body/div[3]/div[2]/div/form/div[1]/div/label")).getText();
				String[] spring_process = color_process.split(" ");
				String overdraft_process_rows = spring_process[0];
				
				log.info("No of rows to be processed--"+ overdraft_process_rows);
				
				//compare uploaded and to be processed
				if(Integer.parseInt(overdraft_rows) == Integer.parseInt(overdraft_process_rows)){
					log.info("Number of rows imported and number of rows to be processed MATCHED")	
				
					//process button
					pageLoadTimeout(500000);
					$(byXpath("//button[@name='process']")).click();
					
					fluentWait().until(ExpectedConditions.presenceOfElementLocated(byXpath("/html/body/div[3]/div[2]/div/div/div/div")));
					String color_post_process = $(byXpath("/html/body/div[3]/div[2]/div/div/div/div")).getText();
						
					//CLOSE
					pageLoadTimeout(240000);
					openChrome(MCIB_webPortal+"?overdraftloan/close");//---portal
						
					String color_close = $(byXpath("/html/body/div[3]/div[2]/div/form/div[1]/div/label")).getText();
					
					Boolean close_check = false;
					try{
						close_check = byText("Close products").is(EXIST);
					}catch(Exception e){
						close_check = false;
					}
					
					if(close_check){
						byText("Close products").click();
						log.info("Products Closed");
					}
				}
				else{
					log.info("Number of rows imported and number of rows to be processed NOT MATCHED");
					overdraft_arrears_except = true;
				}
				
			}
			////////////////////////////////////////////////////////////////////////////
			}
			}
			}
			//////
			}catch(Exception e){
				overdraft_arrears_except = true;
			}
			//////////////////////////////LOANS AND OVERDRAFT///////////////////////////
			
		
			
			/////////////////////////////////CREDIT CARDS///////////////////////////////
			try{
			////
			if(export[2] != null){
			if(export[2].contains("Credit cards")){
			///////////////////////////////////////////////////////////////////////////
			
			log.info("--------Credit Cards---------");
			
			//UPLOAD
			pageLoadTimeout(150000);
			openChrome(MCIB_webPortal+"?upload");//---portal
			
			//choose file
			$$(byXpath("//*[@id='datafile']")).get(1).click();
			switchTo().window('[CLASS:#32770;TITLE:Open]');
			
			setClipboardText(Dir+currmonth_folder+"\\"+currdt_folder+"\\"+export[2]);//-------path
			pressCtrlV();
			$('[CLASS:Button;NAME:Open]').click();
			
			//upload button
			pageLoadTimeout(500000);
			$(byValue("Upload CRC")).click();
			
			fluentWait().until(ExpectedConditions.presenceOfElementLocated(byXpath("/html/body/div[3]/div[2]/div/div[1]/div/div/span")));
			
			Boolean text_present = false;
			String color = "";
			color =  $(byXpath("/html/body/div[3]/div[2]/div/div[1]/div/div/span")).getText();
						
			log.info("No of rows uploaded---"+ overdraft_rows);
			
			//upload success
			if(color.contains("Import completed")){
				
				log.info("Import Completed");
				
				String advanced_color = color.trim();
				String[] spring = advanced_color.split("\\.");
				second_phrase = spring[1];
				String second_phrase_evolution = second_phrase.trim();
				String[] rez = second_phrase_evolution.split(" ");
				String overdraft_rows = rez[0]
				
				//PROCESS
				pageLoadTimeout(240000);
				openChrome(MCIB_webPortal+"?creditcards/process");//---portal
				
				String color_process = $(byXpath("/html/body/div[3]/div[2]/div/form/div[1]/div/label")).getText();
				String[] spring_process = color_process.split(" ");
				String overdraft_process_rows = spring_process[0];
				
				log.info("No of rows to be processed--"+ overdraft_process_rows);
				
				//compare uploaded and to be processed
				if(Integer.parseInt(overdraft_rows) == Integer.parseInt(overdraft_process_rows)){
					log.info("Number of rows imported and number of rows to be processed MATCHED");	
				
					//process button
					pageLoadTimeout(500000);
					$(byXpath("//button[@name='process']")).click();
					
					fluentWait().until(ExpectedConditions.presenceOfElementLocated(byXpath("/html/body/div[3]/div[2]/div/div/div/div/span")));
					
					Boolean text_present_process = false;
					String color_post_process = "";
					color_post_process = $(byXpath("/html/body/div[3]/div[2]/div/div/div/div/span")).getText();
					
					println("COLOR POST PROCESS--->"+color_post_process);
						
					//CLOSE
					pageLoadTimeout(240000);
					openChrome(MCIB_webPortal+"?creditcards/close");//---portal
						
					String color_close = $(byXpath("/html/body/div[3]/div[2]/div/form/div[1]/div/label")).getText();
					
					Boolean close_check = false;
					try{
						close_check = byText("Close products").is(EXIST);
					}catch(Exception e){
						close_check = false;
					}
					
					if(close_check){
						byText("Close products").click();
						log.info("Products Closed");
					}
				
				}
				else{
					log.info("Number of rows imported and number of rows to be processed NOT MATCHED");
					credit_arrears_except = true;
				}
				
				
			}
			////////////////////////////////////////////////////////////////////////////
			}
			}
			//////
			}catch(Exception e){
				credit_arrears_except = true;
			}
			/////////////////////////////////CREDIT CARDS///////////////////////////////
			 
			
			///////////////////////////////////////////////////////////ARREARS/////////////////////////////////////////////////////////////
		
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
						
			/////////////////////////////////LOANS AND OVERDRAFT ARREARS///////////////////////////////
			if(export[3] != null){
			if(export[3].contains("Overdraft arrears")){
			if(!overdraft_arrears_except){
			//////////////////////////////////////////////////////////////////////////////////////////
			
			log.info("------Loans and Overdraft Arrears-------");
			
			//UPLOAD
			pageLoadTimeout(150000);
			openChrome(MCIB_webPortal+"?balances_import");//---portal
			
			//choose file
			$$(byXpath("//*[@id='datafile']")).get(0).click();
			switchTo().window('[CLASS:#32770;TITLE:Open]');
			
			setClipboardText(Dir+currmonth_folder+"\\"+currdt_folder+"\\"+export[3]);//-------path
			pressCtrlV();
			$('[CLASS:Button;NAME:Open]').click();
			
			//upload button
			pageLoadTimeout(500000);
			$(byValue("Upload LOVD")).click();
			
			fluentWait().until(ExpectedConditions.presenceOfElementLocated(byXpath("/html/body/div[3]/div[2]/div/div[1]/div/div/span")));
			
			Boolean text_present = false;
			String color = "";
			color =  $(byXpath("/html/body/div[3]/div[2]/div/div[1]/div/div/span")).getText();
						
			if(color.contains("Import completed")){
			
				log.info("Loans and Overdraft Arrears- Import Completed");	
			}
			else{
			
				log.info("Loans and Overdraft Arrears- Import NOT Completed");	
			
			}
		
			
			///////////////////////////////////////////////////////////////////////////////////////////
			}
			}
			}
			/////////////////////////////////LOANS AND OVERDRAFT ARREARS///////////////////////////////
			
			
			/////////////////////////////////////CREDIT CARDS ARREARS//////////////////////////////////
			if(export[4] != null){
			if(export[4].contains("Credit cards arrears")){
			if(!credit_arrears_except){
			//////////////////////////////////////////////////////////////////////////////////////////
			
			log.info("-------Credit Cards Arrears-------");
			
			//UPLOAD
			pageLoadTimeout(150000);
			openChrome(MCIB_webPortal+"?balances_import");//---portal
			
			//choose file
			$$(byXpath("//*[@id='datafile']")).get(1).click();
			switchTo().window('[CLASS:#32770;TITLE:Open]');
			
			setClipboardText(Dir+currmonth_folder+"\\"+currdt_folder+"\\"+export[4]);//-------path
			pressCtrlV();
			$('[CLASS:Button;NAME:Open]').click();
			
			//upload button
			pageLoadTimeout(500000);
			$(byValue("Upload CRC")).click();
			
			fluentWait().until(ExpectedConditions.presenceOfElementLocated(byXpath("/html/body/div[3]/div[2]/div/div[1]/div/div/span")));

			Boolean text_present = false;
			String color = "";
			color =  $(byXpath("/html/body/div[3]/div[2]/div/div[1]/div/div/span")).getText();
						
			if(color.contains("Import completed")){
				
				log.info("Credit Card Arrears- Import Completed");
			
			}
			else{
			
				log.info("Credit Card Arrears- Import NOT Completed");	
			
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////////////
			}
			}
			}
			/////////////////////////////////////CREDIT CARDS ARREARS//////////////////////////////////
			
			
			///////////////////////////////////////////////////////////ARREARS/////////////////////////////////////////////////////////////
			
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			
			///////////////////////////////////////////////////////////PORTAL//////////////////////////////////////////////////////////////
			}
			}
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			else{
				log.info("Files not exported successfully from Teradata");
			
			}
			 
			
			]]></script>
		</robot>
	</robotics-flow>
    <export include-original-data="true"></export>

</config>

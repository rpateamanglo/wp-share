<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config" scriptlang="groovy">

<var-def name="ph">
		<datastore name="public_holidays">
			SELECT * from @this
		</datastore>
</var-def>
	
	<robotics-flow>
<robot driver="universal" name="driver" start-in-private="false" close-on-completion="true">
			<capability name ="SEARCH_ALL_WINDOWS" value="true"/>
			<capability name="CLOSE_ALL_WINDOWS" value="false"/>
		<script><![CDATA[
		
			//robot checks for records for previous working day-->e.g FRI 24/07 robot puts criteria 23 12:00 AM and 24 12:00 AM, checks for IBK then compare with MA Files for 23
			
			//listings is also appending into hashmap->added listing condition before appeding to hashmap 07/08/20
			//date scenarios for morongwa query -- monday, public holiday, pwd falls on pevious month(previous working month) 11/08/20
			//getting issue while downloading morongwa excel -->button to be clicked might be disabled-->dynamic wait 12/08/20
			//account not matching if contains all numbers sometimes -- removed leading 0s 12/08/20 
			//search in MA Files 13/08/20
			//matched hashmap that containts search reference and amount if matched 14/08/20
			//search in 201 folder if not found in MA-->typically in "Q:\ROBOTICS\201 REPORTS\AUGUST\03\03 XXX\Reports\" 14/08/20
			//.201 file hardcoded where to get amount from-->it changes in each file-->dont hardcode loop through array to find DR or CR in array 17/08/20
			//scenario-->first record and fourth record in ref and amount array same
			//.201 getting duplicates(when there are more than one transaction with same acc no in same file) while verifying-->option 1-remove ref and amount from arrays after matched-->problem loop will get out of bounds because the loop size will be reduced
			//.201 if there are 2 identical records, duplicates will be caused in the loop-->use break after matched-->problem
			//.201 solution use boolean to indicate if already matched, then go to next line in text 17/08/20
			//added ebox array for records found on MA 25/08/20
			//second pwd for searching-->dynamic month and date search for 201 27/08/20 test further
			
			//auth 21/08/20-->test further if key changes
			
			//add missing scenarios for account number
			//delete morongwa excel after use or move to daily folder-->move default downloads to daily folder	
			//search reference is name
			//those who match with MA search on ebox, rest search on 201 and put to log
			//date problem-->sometimes will have to search on pwd and sometimes same date 
			//MA Files will they be in monthly folders?
			
			//duplicates while searching in 201 files--> use array to store records obtained in MA only to compare with whle searching 201 27/08/20
			
			
			//date
			import java.time.LocalDate;
			import java.time.LocalDateTime;
			import java.time.ZoneId;
			import java.time.format.DateTimeFormatter
						
			//apache excel
			import org.apache.poi.xssf.usermodel.*;
			import org.apache.poi.ss.usermodel.*;
			import org.apache.poi.hssf.usermodel.*;
			import java.text.SimpleDateFormat;
			import org.apache.poi.ss.usermodel.DateUtil;
			
			//java string manipulation
			import java.text.DecimalFormat;
			import java.math.*; //big decimal
			
			//gAuth
			//import com.warrenstrange.googleauth.GoogleAuthenticator;
			
			//DATE
			LocalDate karanLocal    = LocalDate.parse("2020-08-04"); 							
			//LocalDate karanLocal    = LocalDate.now()		
			LocalDate pwd		    = karanLocal.minusDays(1);										//live
			LocalDate second_pwd	= pwd.minusDays(1);
			DateTimeFormatter csvDateFormat   = DateTimeFormatter.ofPattern("M/d/yyyy");

			DateTimeFormatter morongwaQueryDateFormat   = DateTimeFormatter.ofPattern("d");
			DateTimeFormatter MAFileDateFormat			= DateTimeFormatter.ofPattern("MMdd");
			DateTimeFormatter reports201DateFormat      = DateTimeFormatter.ofPattern("MMMM");
			DateTimeFormatter reports201subDateFormat      = DateTimeFormatter.ofPattern("dd");
			
			//PORTAL
			String morongwa_uat = "https://celine-morongwa-uat.apps.nonprod.ocp.absa.co.za/#/";
			String morongwa_live = "https://morongwa.prod.ocp.absa.co.za/#/";
			String morongwa_login = "ABOR048";
			String morongwa_pass = "Finger9.Ever";
			
			//PATH
			String download_path = "C:\\Users\\RB-MU_Robot_VPC_01\\Downloads\\";
			String morongwa_path = "";
			String MAFolder_path = "Q:\\CORPORATE ENTITY\\Year 2020\\Sybrin Echannel\\";
			String reports201_path = "Q:\\ROBOTICS\\201 REPORTS\\" 
			//Q:\\ROBOTICS\\201 REPORTS\\
			//\\muebcyp02fvg02\\eProcessing1$
		
			//swift cmp
			String[] bombaclak;
			ArrayList bombaclakos = new ArrayList();
			ArrayList<Double> swiftAmountArr = new ArrayList<Double>();
			ArrayList<String> swiftSearchRefArr = new ArrayList<String>();
			ArrayList<Double> swiftAmountArrCmp = new ArrayList<Double>();
			ArrayList<String> swiftSearchRefArrCmp = new ArrayList<String>();
			ArrayList<String> eboxBranchCodeArr = new ArrayList<String>();
			ArrayList<String> eboxAccNumArr = new ArrayList<String>();
			ArrayList<String> eboxAmtArr = new ArrayList<String>();
			ArrayList<String> excelBranchCodeArr = new ArrayList<String>();
			ArrayList<String> excelAccNumArr = new ArrayList<String>();
			ArrayList<String> excelAmtArr = new ArrayList<String>();
			ArrayList<Double> swiftAmountArrMA = new ArrayList<Double>();
			ArrayList<String> swiftSearchRefArrMA = new ArrayList<String>();
			
			Double swiftAmount = 0.0;
			String swiftBOName = "";
			String swiftAccNum = "";
			boolean listing = false;
			
			
			//LIST OF PUB_HO
			List dateList = new ArrayList();
			for(int i = 0; i < ph.size(); i++){
				date = ph.get(i).getAt("Date").toString();	
				dateList.add(date);
			}
			
			//PREVIOUS WORKING DAY
			boolean validPwd = false;
			while(!validPwd){
				
				String pwdCheck = pwd.format(csvDateFormat);
					 
				//PREVIOUS WORKING IS A NON-SUNDAY PUBLIC HOLIDAY
				if(dateList.contains(pwdCheck) && pwd.getDayOfWeek().toString() != "SUNDAY"){
					pwd = pwd.minusDays(1);

				}
				//THE WEEKND
				else if(pwd.getDayOfWeek().toString() == "SUNDAY"){
					//SUNDAY
					if(pwd.getDayOfWeek().toString() == "SUNDAY"){
						pwd = pwd.minusDays(1);
					}
					
					//SATURDAY
					if(pwd.getDayOfWeek().toString() == "SATURDAY"){
						pwd = pwd.minusDays(1);
					}
				}
				//ALL OTHER SCENARIOS(NORMAL WORKING DAY)
				else{
					validPwd = true;
				}
				
				
			}
			//SECOND PREVIOUS WORKING DAY
			boolean validSecondPwd = false;
			while(!validSecondPwd){
				
				String pwdCheck = second_pwd.format(csvDateFormat);
					 
				//PREVIOUS WORKING IS A NON-SUNDAY PUBLIC HOLIDAY
				if(dateList.contains(pwdCheck) && pwd.getDayOfWeek().toString() != "SUNDAY"){
					second_pwd = second_pwd.minusDays(1);

				}
				//THE WEEKND
				else if(second_pwd.getDayOfWeek().toString() == "SUNDAY"){
					//SUNDAY
					if(second_pwd.getDayOfWeek().toString() == "SUNDAY"){
						second_pwd = second_pwd.minusDays(1);
					}
					
					//SATURDAY
					if(second_pwd.getDayOfWeek().toString() == "SATURDAY"){
						second_pwd = second_pwd.minusDays(1);
					}
				}
				//ALL OTHER SCENARIOS(NORMAL WORKING DAY)
				else{
					validSecondPwd = true;
				}
				
				
			}

			log.info("Current Day: "+karanLocal);
			//PWD CHANGES 
			log.info("Previous Working Day: "+pwd);
			log.info("Second Previous Working Day: "+second_pwd);
			/* 
			
			 
		 	//////////////////////////////////////////////////////////DOWNLOAD MORONGWA/////////////////////////////////////////////////////////////////
			String secret = "KZ4U6RSLIRAWO32MGB2FCOBSGVQUUNBS";
			GoogleAuthenticator gAuth = new GoogleAuthenticator();
			int code = gAuth.getTotpPassword(secret);
			
			//LOGIN
			openChrome(morongwa_live);
			$(byXpath('//*[@id="username"]')).sendKeys(morongwa_login);
			$(byXpath('//*[@id="password"]')).sendKeys(morongwa_pass);
			$(byXpath('//*[@id="kc-login"]')).click();
			
			//G_AUTH 
			$(byXpath('//*[@id="totp"]')).sendKeys(code);
			$(byXpath('//*[@id="kc-login"]')).click();
			
			//test
			//switchToExistingWindow(new WindowDescriptor("", "(?i).*\\QMorongwa\\E.*", false, true).toString(), 1000)
			
			//Morongwa ARO
			$(byXpath('//*[@id="morongwa-aro"]')).click();
			sleep(5000);
			
			//MESSAGES
			
			//SYSTEM DATE--from--if pwd is friday or public holiday
			String morongwaPwDate = pwd.format(morongwaQueryDateFormat);
			if(pwd != karanLocal.minusDays(1)){
				//change month
				$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[1]/div/div[4]/div[1]/angular2-date-picker/div/div[1]')).click();
				if(pwd.getMonth() != karanLocal.getMonth()){
					$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[1]/div/div[4]/div[1]/angular2-date-picker/div/div[2]/div[2]/i[1]')).click();
				}
				$(byText(morongwaPwDate)).click();
				//$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[1]/div/div[4]/div[1]/angular2-date-picker/div/div[1]')).click();
				//$(byAttribute('class','wc-date-container')).click();
			}
			
			//SYSTEM DATE--to
			//choose system date
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[2]/div/div[2]/select')).click(); 
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[2]/div/div[2]/select/option[20]')).click(); 
			sleep(1000);
			//choose operator
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[2]/div/div[3]/select')).click();
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[2]/div/div[3]/select/option[3]')).click();
			sleep(1000);
			//choose date/time
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[2]/div/div[4]/div[1]/angular2-date-picker/div/div[1]')).click();
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[2]/div/div[4]/div[1]/angular2-date-picker/div/div[2]/div[1]/div[4]/div/span')).click();
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[2]/div/div[4]/div[1]/angular2-date-picker/div/div[2]/div[5]/div[1]/div[1]/input')).text("11");
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[2]/div/div[4]/div[1]/angular2-date-picker/div/div[2]/div[5]/div[1]/div[3]/input')).text("00");
			sleep(1000);
			//am
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[2]/div/div[4]/div[1]/angular2-date-picker/div/div[2]/div[5]/div[2]/div/button[1]')).click();
			sleep(1000);
			//pm
			//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[2]/div/div[4]/div[1]/angular2-date-picker/div/div[2]/div[5]/div[2]/div/button[2]
			sendKeys(Keys.PAGE_DOWN);
			sleep(1000);
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[2]/div/div[4]/div[1]/angular2-date-picker/div/div[2]/div[5]/div[3]')).click();
			sleep(1000);
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[2]/div/div[4]/div[1]/angular2-date-picker/div/div[2]/div[6]/div')).click();
			
			//ADD QUERY
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/div[2]/label')).click();
			
			//DIRECTION
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[3]/div/div[2]/select')).click();
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[3]/div/div[2]/select/option[8]')).click();
			$(byXpath('//*[@id="direction"]')).click();
			$(byXpath('//*[@id="direction"]/option[2]')).click();
			
			//ADD QUERY
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/div[2]/label')).click();
			
			//MESSAGE TYPE
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[4]/div/div[2]/select')).click();
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[4]/div/div[2]/select/option[10]')).click();
			$(byXpath('//*[@id="messageType"]')).text("MT202");
			
			//ADD QUERY
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/div[2]/label')).click();
			
			//CURRENCY CODE
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[5]/div/div[2]/select')).click();
			$(byXpath('//*[@id="queryTab-panel"]/form/div/div/mor-query-builder/ul/li[5]/div/div[2]/select/option[6]')).click();
			$(byXpath('//*[@id="paymentDetails_currencyCode"]')).text('MUR');
			
			//test
			sleep(20000)
			
			//SEARCH
			sleep(2000);
			//$(byXpath('//*[@id="queryTab-panel"]/form/div/div/div/label/')).click();
			$(byText('Search')).click();
			
			
			//DOWNLOAD EXCEL
			boolean download = $(byXpath('/html/body/app-root/div/div/div/ng-component/div[1]/ng-component/div/div[2]/div/div/div[1]/div/mor-data-export/div/button')).is(ENABLED);
			while(!download){
				download = $(byXpath('/html/body/app-root/div/div/div/ng-component/div[1]/ng-component/div/div[2]/div/div/div[1]/div/mor-data-export/div/button')).is(ENABLED);
				sleep(2500);
			}

			if(download){ 
				$(byXpath('/html/body/app-root/div/div/div/ng-component/div[1]/ng-component/div/div[2]/div/div/div[1]/div/mor-data-export/div/button')).click();
				$(byXpath('/html/body/app-root/div/div/div/ng-component/div[1]/ng-component/div/div[2]/div/div/div[1]/div/mor-data-export/div/div/button[1]')).click();
				sleep(5000);
			} */
			File downloadFolder = new File(download_path);
			File[] downloadFiles = downloadFolder.listFiles();
			for(File file : downloadFiles){
				if(file.getName().contains("Morongwa_export")){
					morongwa_path = file.toPath();
				}
			}
		 	//////////////////////////////////////////////////////////DOWNLOAD MORONGWA/////////////////////////////////////////////////////////////////
			File morongwaFile = new File(morongwa_path);	
			//////////////////////////////////////////////////////////READ SWIFT MESSAGE//////////////////////////////////////////////////////////////////
		
			FileInputStream fisi1 = new FileInputStream(morongwaFile);
			XSSFWorkbook outputWorkbook1 = new XSSFWorkbook(fisi1);
			XSSFSheet outputSheet1 = outputWorkbook1.getSheetAt(0);	
			
			int outputRowCount1 = outputSheet1.getLastRowNum();
			int currentRowIndex1=1;//CHANGE
			
			Iterator rowIterator1 = outputSheet1.iterator();
			
			xlsRecord: while(rowIterator1.hasNext()){
			
				//reinitialise arrays and variables
				bombaclak = new String[0];
				swiftAccNum = "";
				swiftBOName = "";
				swiftAmount = 0.0;
				listing = false;
				
				Row currentRow1 = outputSheet1.getRow(currentRowIndex1);
				if(currentRow1 == null){
					break;
				}
			
				Cell cellData1 = currentRow1.getCell(18,Row.MissingCellPolicy.RETURN_BLANK_AS_NULL); //column 18 "Fin Format"
				DataFormatter formatter1 = new DataFormatter();
				value1 = formatter1.formatCellValue(cellData1);
				
				if(value1.contains("IBK")){
					//println("----------------------------")
					
					//sleep(5000)
					//println("eyebeeks foundos")
					//println("IBK->"+currentRowIndex1);
					
					//delimiters(remove start and end of swift message tag)
					int startIndex = value1.indexOf(":20")
					int endIndex = value1.indexOf("-}");
					value1 = value1.substring(startIndex+1,endIndex-1);
					bombaclak = value1.split(":");
					
					
					//SEARCH FOR AMOUNT 
					for(int i = 0; i < bombaclak.size(); i++){
						
						if(bombaclak[i].contains("MUR") && bombaclak[i-1].contains("32A")){
							int amountIndex = bombaclak[i].indexOf("R");
							String amountStr = bombaclak[i].substring(amountIndex+1, bombaclak[i].length());
							amountStr = amountStr.replace(",",".");
							swiftAmount = Double.parseDouble(amountStr);
							//println(swiftAmount);
							
						}
						
					}
					
					//SEARCH FOR ACCOUNT DETAILS
					String accountDetailsRaw = bombaclak[bombaclak.size()-1].trim();
					accountDetailsRaw = accountDetailsRaw.replace("//","");
					String[] accountDetailsRawArr = accountDetailsRaw.split("\\r?\\n");
					for(int i = 0; i < accountDetailsRawArr.size(); i++){
						
						//LISTING TO FOLLOW(will receive transactions by mail->skip)
						if(accountDetailsRawArr[i].contains("LISTINGS")){
							//continue xlsRecord;
							listing = true;
							break;
						}
						
						
						//by order of(name of person..)
						if(accountDetailsRawArr[i].contains("BO") || accountDetailsRawArr[i].contains("B/O") ){

							int nameIndex = accountDetailsRawArr[i].indexOf("O");
							String name = accountDetailsRawArr[i]
							name = name.substring(nameIndex+1, name.length());
							swiftBOName = name.trim();
							//println(swiftBOName)
							
						}
						
						//ACCOUNT NUMBER
						//invalid credit account number
						if(accountDetailsRawArr[i].contains("INVALID CREDIT ACCOUNT")){
							
							int partOneIndex = accountDetailsRawArr[i].indexOf("-");
							String partOne = accountDetailsRawArr[i].substring(partOneIndex+1,accountDetailsRawArr[i].length());
							partOne = partOne.trim();
							String partTwo = accountDetailsRawArr[i+1].trim();
							swiftAccNum = partOne + partTwo;
							//println(swiftAccNum);
							
						}
						//credit account is closed
						if(accountDetailsRawArr[i].contains("CREDIT ACCOUNT IS CLOSED")){
							
							int partOneIndex = accountDetailsRawArr[i].indexOf("-");
							String partOne = accountDetailsRawArr[i].substring(partOneIndex+1,accountDetailsRawArr[i].length());
							partOne = partOne.trim();
							String partTwo = accountDetailsRawArr[i+1].trim();
							swiftAccNum = partOne + partTwo;
							//println(swiftAccNum)
							
						}
						//ac no. is invalid
						if(accountDetailsRawArr[i].contains("AC NO.")){
							
							int partOneIndex = accountDetailsRawArr[i].indexOf(".");
							String partOne = accountDetailsRawArr[i].substring(partOneIndex+1,accountDetailsRawArr[i].length());
							partOne = partOne.trim();
							swiftAccNum = partOne;
							//println(swiftAccNum)
							
						}
						//acc not found
						if(accountDetailsRawArr[i].contains("ACC") && accountDetailsRawArr[i].contains("NOT FOUND")){
							
							int partOneIndex = accountDetailsRawArr[i].indexOf("ACC");
							int partTwoIndex = accountDetailsRawArr[i].indexOf("NO");
							String partOne 	 = accountDetailsRawArr[i].substring(partOneIndex+3,partTwoIndex-1);
							partOne = partOne.trim();
							swiftAccNum = partOne;
							//println(swiftAccNum)
							
						}
						//inactive credit account
						if(accountDetailsRawArr[i].contains("INACTIVE CREDIT ACCOUNT")){
							int partOneIndex = accountDetailsRawArr[i].indexOf("-");
							String partOne = accountDetailsRawArr[i].substring(partOneIndex+1,accountDetailsRawArr[i].length());
							String partTwo = accountDetailsRawArr[i+1].trim();
							swiftAccNum = partOne + partTwo;
							//println(swiftAccNum)
						}
						//acc no is invalid
						if(accountDetailsRawArr[i].contains("ACC NO")){
							
							int partOneIndex = accountDetailsRawArr[i].indexOf("NO");
							int partTwoIndex = accountDetailsRawArr[i].indexOf("IS");
							String partOne = accountDetailsRawArr[i].substring(partOneIndex+2,partTwoIndex-1);
							partOne = partOne.trim();
							swiftAccNum = partOne;
							//println(swiftAccNum)
							
						}
						
					}
					//add account details in hashmap
					if(!listing){
						if(swiftAccNum != ""){
							swiftAmountArr.add(swiftAmount);
							swiftSearchRefArr.add(swiftAccNum)
							//println("HASHMAP->"+currentRowIndex1);
						}
						else if(swiftAccNum.isEmpty()){
							swiftAmountArr.add(swiftAmount);
							swiftSearchRefArr.add(swiftBOName);
							//println("HASHMAP->"+currentRowIndex1);
						}
						else if(swiftBOName.isEmpty()){
							swiftAmountArr.add(swiftAmount);
							swiftSearchRefArr.add(" ");
							//println("HASHMAP->"+currentRowIndex1);
						}
					}
					
				}
				
				currentRowIndex1++;
			}
			println(swiftSearchRefArr);
			println(swiftSearchRefArr.size())
			println(swiftAmountArr)
			//////////////////////////////////////////////////////////READ SWIFT MESSAGE//////////////////////////////////////////////////////////////////
			  
			///////////////////////////////////////////////////////////READ MA MESSAGE////////////////////////////////////////////////////////////////////
			String MAFileDatePart = karanLocal.format(MAFileDateFormat);
			String MAFilePwdDatePart = pwd.format(MAFileDateFormat);
			String MAFileSecondPwdDatePart = second_pwd.format(MAFileDateFormat);
			
			log.info("SEARCHING IN MA FILES");
			File MAFolder = new File(MAFolder_path);
			File[] MAFiles = MAFolder.listFiles();
			for(File file : MAFiles){
				if(file.getName().contains("MA06"+MAFileDatePart) || file.getName().contains("MA06"+MAFilePwdDatePart) || file.getName().contains("MA06"+MAFileSecondPwdDatePart)){
					log.info("Searching in "+file.getName());
					Scanner myReader = new Scanner(file);
					myReader.nextLine();  //header
					while(myReader.hasNextLine() && myReader != null){
						
						String raw_status = myReader.nextLine(); 
						String swiftSearchRefTrimmed = "";
						//check if record matches with account details of swift ibk-for each record 
						for(int i = 0; i < swiftSearchRefArr.size(); i++){
							swiftSearchRefTrimmed = swiftSearchRefArr[i].replaceFirst('^0+(?!$)', "");
							if(raw_status.contains(swiftSearchRefTrimmed)){ //missing screnario-> where there is no acc number or name in swift, then there will be a blank space 
								
								//parse branch code and account no of destination
								ArrayList<String> trans_details = raw_status.split(" ");
								trans_details.removeAll(Arrays.asList("", null));
								String dest_branch_raw = trans_details[0];
								String dest_branch = dest_branch_raw.substring(dest_branch_raw.length()-2,dest_branch_raw.length());
								String dest_acc_raw = trans_details[1];
								String dest_acc = dest_acc_raw.substring(0,7);
								
								//println(file.getName())
								//println("Account "+swiftSearchRefArr[i]);
								//println("Amount "+swiftAmountArr[i]);
								
								//parse amount and currency
								int lastBlankIndex = raw_status.lastIndexOf(" "); 
								String amount_currency = raw_status.substring(lastBlankIndex+1,raw_status.length());
								String amount_raw = amount_currency.substring(3,amount_currency.length()); //need to test more length of currency
								if(amount_currency.contains("MUR")){
									amount_bd = new BigDecimal(amount_raw);
									amount_bd = amount_bd.movePointLeft(2);
									double amount = amount_bd.doubleValue();
									if(swiftAmountArr[i] == amount){
										//println("suxxessa")
										//to compare with original array to see if all records found
										swiftAmountArrCmp.add(swiftAmountArr[i]);
										swiftSearchRefArrCmp.add(swiftSearchRefArr[i]);
										//to make a search on ebox(MA only)
										eboxBranchCodeArr.add(dest_branch);
										eboxAccNumArr.add(dest_acc);
										eboxAmtArr.add(amount)
										//records obtained in MA will often be found in 201 files also, so to not add duplicates, this array will be compared to swiftAmountArrCmp while searching in 201
										swiftAmountArrMA.add(swiftAmountArr[i]);
										swiftSearchRefArrMA.add(swiftSearchRefArr[i]);
									}
								}
							}
						}
					}
				}
			}
			println("MA SEARCH-->"+swiftSearchRefArrCmp)
			println("EBOX BRANCH-->"+eboxBranchCodeArr)
			println("EBOX ACC-->"+eboxAccNumArr)
			///////////////////////////////////////////////////////////READ MA MESSAGE////////////////////////////////////////////////////////////////////
			//////////////////////////////////////////////////////////READ 201 MESSAGE////////////////////////////////////////////////////////////////////
			String reports201FolderDate = karanLocal.format(reports201DateFormat).toUpperCase();
			String reports201subFolderDate = karanLocal.format(reports201subDateFormat);
			String reports201pwdFolderDate = pwd.format(reports201DateFormat).toUpperCase();
			String reports201pwdsubFolderDate = pwd.format(reports201subDateFormat);
			String reports201SecondpwdFolderDate = second_pwd.format(reports201DateFormat).toUpperCase();
			String reports201SecondpwdsubFolderDate = second_pwd.format(reports201subDateFormat);
			
			//to remove duplicates
			swiftAmountArrCmp.clear();
			swiftSearchRefArrCmp.clear();
			
			log.info("SEARCHING IN .201 FILES");
			File folder201Reports = new File(reports201_path);
			File[] folder201Month = folder201Reports.listFiles();
			for(File file : folder201Month){
				if(file.getName().equals(reports201FolderDate) || file.getName().equals(reports201pwdFolderDate) || file.getName().equals(reports201SecondpwdFolderDate)){
					File[] folder201Date = file.listFiles();
					for(File datefile : folder201Date){
						if(datefile.getName().equals(reports201subFolderDate) || datefile.getName().equals(reports201pwdsubFolderDate) || datefile.getName().equals(reports201SecondpwdsubFolderDate)){
							//PROCESS ALL .201 AND SEARCH FOR RECORDS
							//201 Reports dated folder e.g 31
							//if all records found skip folder
							if(swiftSearchRefArr.size() != swiftSearchRefArrCmp.size()){		
								if(file.exists()){
									log.info("Searching in 201 Folder for "+ file.getName()+ "-"+datefile.getName());
									File[] folder201Folder = datefile.listFiles();
									for(File folder: folder201Folder){
										//sub folder e.g 31 MNS
										File[] folder201SubFolder = folder.listFiles();
										for(File subfolder: folder201SubFolder){
											if(subfolder.getName().contains("Reports")){
												//reports folder 
												File[] reportsFolder = subfolder.listFiles();
												for(File reports: reportsFolder){
													File[] subReportsFolder = reports.listFiles();
													for(File reportsSub:subReportsFolder){
														if(reportsSub.getAbsolutePath().contains(".201")){
															Scanner myReader = new Scanner(reportsSub);
															myReader.nextLine();  //header
															while(myReader.hasNextLine() && myReader != null){
																String raw_status = myReader.nextLine();
																String swiftSearchRefTrimmed = "";
																boolean match_found = false;
																for(int i = 0; i < swiftSearchRefArr.size(); i++){
																	if(!match_found){
																		swiftSearchRefTrimmed = swiftSearchRefArr[i].replaceFirst('^0+(?!$)', "");
																		if(raw_status.contains(swiftSearchRefTrimmed)){
																			//println(reportsSub.getAbsolutePath())
																			ArrayList status = raw_status.split(" ");
																			status.removeAll(Arrays.asList(null,""));
																			//search for amount's position in array
																			int amount_index = 0;
																			for(int j =0; j < status.size(); j++){
																				if(status[j].contains("DR") || status[j].contains("CR")){
																					amount_index = j;
																				}
																			}
																			//parse amount
																			String amount_currency = status[amount_index].trim();
																			String amount_str = amount_currency.substring(0,amount_currency.length()-2)
																			amount_str = amount_str.replace(",","");
																			double amount = Double.parseDouble(amount_str);
																			
																			//parse originating details
																			
																			//println(swiftSearchRefArr[i])
																			//println(amount_currency)
																			
																			if(swiftAmountArr[i] == amount){
																				//println("suzzessa")
																				match_found = true;

																				swiftAmountArrCmp.add(swiftAmountArr[i]);
																				swiftSearchRefArrCmp.add(swiftSearchRefArr[i]);
																				if(!swiftSearchRefArrMA.contains(swiftSearchRefArr[i]) && !swiftAmountArrMA.contains(swiftAmountArr[i])){
																					//add to array to write to excel
																					excelBranchCodeArr.add("");
																					excelAccNumArr.add(swiftSearchRefArr[i]);
																					excelAmtArr.add(swiftAmountArr[i]);
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
								else{
									log.info("201 Folder does not exist for "+ file.getName()+ "-"+datefile.getName());
								}
								
								
								
							
								
							}
						}
					}
				}
			}
			
			//////////////////////////////////////////////////////////READ 201 MESSAGE////////////////////////////////////////////////////////////////////
			println(swiftSearchRefArrCmp)
			println(swiftAmountArrCmp)
			
			println(excelAccNumArr)   
			println(excelAmtArr)   
			
			//////////////////////////////////////////////////////////WRITE TO REPORT////////////////////////////////////////////////////////////////////
			
			
			
			//////////////////////////////////////////////////////////WRITE TO REPORT////////////////////////////////////////////////////////////////////
			
			]]></script>
	
	</robot>
</robotics-flow>
	
    <export include-original-data="true"></export>

</config>
